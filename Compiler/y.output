State 23 conflicts: 1 shift/reduce
State 48 conflicts: 1 reduce/reduce
State 51 conflicts: 1 shift/reduce
State 142 conflicts: 1 shift/reduce
State 143 conflicts: 1 shift/reduce
State 145 conflicts: 1 shift/reduce
State 147 conflicts: 1 shift/reduce
State 149 conflicts: 1 shift/reduce
State 151 conflicts: 1 shift/reduce
State 153 conflicts: 1 shift/reduce
State 155 conflicts: 1 shift/reduce
State 156 conflicts: 1 shift/reduce
State 157 conflicts: 1 shift/reduce
State 158 conflicts: 1 reduce/reduce
State 159 conflicts: 1 shift/reduce
State 160 conflicts: 1 shift/reduce
State 161 conflicts: 1 shift/reduce
State 162 conflicts: 1 shift/reduce
State 163 conflicts: 1 shift/reduce
State 164 conflicts: 1 shift/reduce
State 165 conflicts: 1 shift/reduce
State 166 conflicts: 1 shift/reduce
State 167 conflicts: 19 shift/reduce


Grammar

    0 $accept: Code $end

    1 Code: headerfileInclude Program

    2 headerfileInclude: INCLUDE HEADERFILE headerfileInclude
    3                  | ε

    4 Program: func_list

    5 func_list: func_list func
    6          | ε

    7 $@1: ε

    8 func: func_prefix OF $@1 stmt_list CF

    9 $@2: ε

   10 func_prefix: func_data_type ID $@2 OC param_list CC

   11 func_data_type: data_type
   12               | VOID

   13 $@3: ε

   14 param_list: param $@3 COMMA param_list
   15           | param
   16           | ε

   17 param: data_type ID

   18 stmt_list: stmt stmt_list
   19          | ε

   20 stmt: declaration
   21     | assign SCOL
   22     | expr SCOL
   23     | return_stmt SCOL
   24     | if_stmt
   25     | while_loop_stmt
   26     | for_loop_stmt
   27     | BREAK SCOL
   28     | CONTINUE SCOL
   29     | switch_stmt
   30     | INPUT OC ID CC SCOL
   31     | INPUT OC ID OS expr CS CC SCOL
   32     | OUTPUT OC expr CC SCOL
   33     | OUTPUT OC STR CC SCOL
   34     | TYPEOF ID SCOL

   35 declaration: data_type ID SCOL
   36            | data_type ID ASSIGN FLEN OC STR CC SCOL
   37            | FLEN OC ID CC ASSIGN ID SCOL
   38            | data_type ID ASSIGN FLEN OC ID CC SCOL
   39            | STRING ID SCOL
   40            | STRING ID ASSIGN STR SCOL
   41            | STRING ID ASSIGN expr SCOL
   42            | data_type ID ASSIGN expr SCOL
   43            | data_type ID assign ID SCOL
   44            | data_type ID OS INT_NUM CS SCOL
   45            | data_type ID OS INT_NUM CS ASSIGN
   46            | data_type ID OS CHARACTER CS ASSIGN
   47            | MAC RESET SCOL
   48            | OF arr_values CF SCOL

   49 $@4: ε

   50 arr_values: const $@4 COMMA arr_values
   51           | const

   52 $@5: ε

   53 arr_values: ID $@5 COMMA arr_values
   54           | ID

   55 return_stmt: RETURN expr
   56            | RETURN STR
   57            | ε

   58 data_type: INT
   59          | FLOAT
   60          | STRING
   61          | CHAR
   62          | BOOL

   63 expr: expr ADD expr
   64     | expr SUBTRACT expr
   65     | expr MULTIPLY expr
   66     | expr DIVIDE expr
   67     | expr MACOP expr
   68     | expr LE expr
   69     | expr LE FLEN OC ID CC
   70     | expr GE expr
   71     | expr GE FLEN OC ID CC
   72     | expr LT expr
   73     | expr LT FLEN OC ID CC
   74     | expr GT expr
   75     | expr GT FLEN OC ID CC
   76     | expr EQ expr
   77     | expr EQ FLEN OC ID CC
   78     | expr NE FLEN OC ID CC
   79     | expr NE expr
   80     | expr AND expr
   81     | expr OR expr
   82     | expr MODULO expr
   83     | expr BITAND expr
   84     | expr BITOR expr
   85     | expr XOR expr
   86     | expr LEFTSHIFT expr
   87     | expr RIGHTSHIFT expr
   88     | unary_expr
   89     | primary_expr
   90     | postfix_expr
   91     | expr ADD ADD

   92 postfix_expr: func_call
   93             | ID OS expr CS

   94 unary_expr: unary_op primary_expr

   95 primary_expr: ID
   96             | const
   97             | OC expr CC

   98 unary_op: ADD
   99         | SUBTRACT
  100         | NOT
  101         | NEGATION

  102 const: INT_NUM
  103      | FLOAT_NUM
  104      | CHARACTER

  105 assign: ID ASSIGN expr
  106       | ID OS expr CS ASSIGN expr
  107       | expr
  108       | declaration

  109 $@6: ε

  110 $@7: ε

  111 $@8: ε

  112 $@9: ε

  113 if_stmt: IF $@6 OC expr CC $@7 OF $@8 stmt_list CF $@9 elif_stmt else_stmt

  114 $@10: ε

  115 $@11: ε

  116 $@12: ε

  117 $@13: ε

  118 elif_stmt: ELIF $@10 OC expr CC $@11 OF $@12 stmt_list CF $@13 elif_stmt
  119          | ε

  120 $@14: ε

  121 else_stmt: ELSE OF $@14 stmt_list CF
  122          | ε

  123 $@15: ε

  124 $@16: ε

  125 $@17: ε

  126 switch_stmt: SWITCH $@15 OC ID $@16 CC OF case_stmt_list $@17 default_stmt CF

  127 case_stmt_list: case_stmt case_stmt_list
  128               | ε

  129 $@18: ε

  130 $@19: ε

  131 case_stmt: CASE $@18 OC const $@19 CC COLON stmt_list

  132 default_stmt: DEFAULT COLON stmt_list
  133             | ε

  134 $@20: ε

  135 $@21: ε

  136 $@22: ε

  137 while_loop_stmt: WHILE $@20 OC expr CC $@21 OF $@22 stmt_list CF

  138 $@23: ε

  139 $@24: ε

  140 $@25: ε

  141 $@26: ε

  142 for_loop_stmt: FOR OC assign SCOL $@23 expr SCOL $@24 assign CC $@25 OF $@26 stmt_list CF

  143 $@27: ε

  144 func_call: ID $@27 OC arg_list CC

  145 arg_list: arg COMMA arg_list
  146         | arg
  147         | ε

  148 arg: expr


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    INCLUDE <node> (258) 2
    HEADERFILE <node> (259) 2
    INT <node> (260) 58
    CHAR <node> (261) 61
    FLOAT <node> (262) 59
    STRING <node> (263) 39 40 41 60
    BOOL <node> (264) 62
    VOID <node> (265) 12
    RETURN <node> (266) 55 56
    INT_NUM <node> (267) 44 45 102
    FLOAT_NUM <node> (268) 103
    ID <node> (269) 10 17 30 31 34 35 36 37 38 39 40 41 42 43 44 45 46 53 54 69 71 73 75 77 78 93 95 105 106 126 144
    LEFTSHIFT <node> (270) 86
    RIGHTSHIFT <node> (271) 87
    LE <node> (272) 68 69
    GE <node> (273) 70 71
    EQ <node> (274) 76 77
    NE <node> (275) 78 79
    GT <node> (276) 74 75
    LT <node> (277) 72 73
    AND <node> (278) 80
    OR <node> (279) 81
    NOT <node> (280) 100
    ADD <node> (281) 63 91 98
    SUBTRACT <node> (282) 64 99
    DIVIDE <node> (283) 66
    MULTIPLY <node> (284) 65
    MODULO <node> (285) 82
    BITAND <node> (286) 83
    BITOR <node> (287) 84
    NEGATION <node> (288) 101
    XOR <node> (289) 85
    STR <node> (290) 33 36 40 56
    CHARACTER <node> (291) 46 104
    CC <node> (292) 10 30 31 32 33 36 37 38 69 71 73 75 77 78 97 113 118 126 131 137 142 144
    OC <node> (293) 10 30 31 32 33 36 37 38 69 71 73 75 77 78 97 113 118 126 131 137 142 144
    CS <node> (294) 31 44 45 46 93 106
    OS <node> (295) 31 44 45 46 93 106
    CF <node> (296) 8 48 113 118 121 126 137 142
    OF <node> (297) 8 48 113 118 121 126 137 142
    COMMA <node> (298) 14 50 53 145
    COLON <node> (299) 131 132
    SCOL <node> (300) 21 22 23 27 28 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 47 48 142
    OUTPUT <node> (301) 32 33
    INPUT <node> (302) 30 31
    SWITCH <node> (303) 126
    CASE <node> (304) 131
    BREAK <node> (305) 27
    DEFAULT <node> (306) 132
    IF <node> (307) 113
    ELIF <node> (308) 118
    ELSE <node> (309) 121
    WHILE <node> (310) 137
    FOR <node> (311) 142
    CONTINUE <node> (312) 28
    TYPEOF <node> (313) 34
    FLEN <node> (314) 36 37 38 69 71 73 75 77 78
    MAC <node> (315) 47
    RESET <node> (316) 47
    MACOP <node> (317) 67
    ASSIGN (318) 36 37 38 40 41 42 45 46 105 106


Nonterminals, with rules where they appear

    $accept (64)
        on left: 0
    Code (65)
        on left: 1
        on right: 0
    headerfileInclude <node> (66)
        on left: 2 3
        on right: 1 2
    Program <node> (67)
        on left: 4
        on right: 1
    func_list <node> (68)
        on left: 5 6
        on right: 4 5
    func <node> (69)
        on left: 8
        on right: 5
    $@1 (70)
        on left: 7
        on right: 8
    func_prefix <node> (71)
        on left: 10
        on right: 8
    $@2 (72)
        on left: 9
        on right: 10
    func_data_type <node> (73)
        on left: 11 12
        on right: 10
    param_list <node> (74)
        on left: 14 15 16
        on right: 10 14
    $@3 (75)
        on left: 13
        on right: 14
    param <node> (76)
        on left: 17
        on right: 14 15
    stmt_list <node> (77)
        on left: 18 19
        on right: 8 18 113 118 121 131 132 137 142
    stmt <node> (78)
        on left: 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34
        on right: 18
    declaration <node> (79)
        on left: 35 36 37 38 39 40 41 42 43 44 45 46 47 48
        on right: 20 108
    arr_values (80)
        on left: 50 51 53 54
        on right: 48 50 53
    $@4 (81)
        on left: 49
        on right: 50
    $@5 (82)
        on left: 52
        on right: 53
    return_stmt <node> (83)
        on left: 55 56 57
        on right: 23
    data_type <node> (84)
        on left: 58 59 60 61 62
        on right: 11 17 35 36 38 42 43 44 45 46
    expr <node> (85)
        on left: 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91
        on right: 22 31 32 41 42 55 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 91 93 97 105 106 107 113 118 137 142 148
    postfix_expr <node> (86)
        on left: 92 93
        on right: 90
    unary_expr <node> (87)
        on left: 94
        on right: 88
    primary_expr <node> (88)
        on left: 95 96 97
        on right: 89 94
    unary_op <node> (89)
        on left: 98 99 100 101
        on right: 94
    const <node> (90)
        on left: 102 103 104
        on right: 50 51 96 131
    assign <node> (91)
        on left: 105 106 107 108
        on right: 21 43 142
    if_stmt <node> (92)
        on left: 113
        on right: 24
    $@6 (93)
        on left: 109
        on right: 113
    $@7 (94)
        on left: 110
        on right: 113
    $@8 (95)
        on left: 111
        on right: 113
    $@9 (96)
        on left: 112
        on right: 113
    elif_stmt <node> (97)
        on left: 118 119
        on right: 113 118
    $@10 (98)
        on left: 114
        on right: 118
    $@11 (99)
        on left: 115
        on right: 118
    $@12 (100)
        on left: 116
        on right: 118
    $@13 (101)
        on left: 117
        on right: 118
    else_stmt <node> (102)
        on left: 121 122
        on right: 113
    $@14 (103)
        on left: 120
        on right: 121
    switch_stmt <node> (104)
        on left: 126
        on right: 29
    $@15 (105)
        on left: 123
        on right: 126
    $@16 (106)
        on left: 124
        on right: 126
    $@17 (107)
        on left: 125
        on right: 126
    case_stmt_list <node> (108)
        on left: 127 128
        on right: 126 127
    case_stmt <node> (109)
        on left: 131
        on right: 127
    $@18 (110)
        on left: 129
        on right: 131
    $@19 (111)
        on left: 130
        on right: 131
    default_stmt (112)
        on left: 132 133
        on right: 126
    while_loop_stmt <node> (113)
        on left: 137
        on right: 25
    $@20 (114)
        on left: 134
        on right: 137
    $@21 (115)
        on left: 135
        on right: 137
    $@22 (116)
        on left: 136
        on right: 137
    for_loop_stmt <node> (117)
        on left: 142
        on right: 26
    $@23 (118)
        on left: 138
        on right: 142
    $@24 (119)
        on left: 139
        on right: 142
    $@25 (120)
        on left: 140
        on right: 142
    $@26 (121)
        on left: 141
        on right: 142
    func_call <node> (122)
        on left: 144
        on right: 92
    $@27 (123)
        on left: 143
        on right: 144
    arg_list <node> (124)
        on left: 145 146 147
        on right: 144 145
    arg <node> (125)
        on left: 148
        on right: 145 146


State 0

    0 $accept: • Code $end

    INCLUDE  shift, and go to state 1

    $default  reduce using rule 3 (headerfileInclude)

    Code               go to state 2
    headerfileInclude  go to state 3


State 1

    2 headerfileInclude: INCLUDE • HEADERFILE headerfileInclude

    HEADERFILE  shift, and go to state 4


State 2

    0 $accept: Code • $end

    $end  shift, and go to state 5


State 3

    1 Code: headerfileInclude • Program

    $default  reduce using rule 6 (func_list)

    Program    go to state 6
    func_list  go to state 7


State 4

    2 headerfileInclude: INCLUDE HEADERFILE • headerfileInclude

    INCLUDE  shift, and go to state 1

    $default  reduce using rule 3 (headerfileInclude)

    headerfileInclude  go to state 8


State 5

    0 $accept: Code $end •

    $default  accept


State 6

    1 Code: headerfileInclude Program •

    $default  reduce using rule 1 (Code)


State 7

    4 Program: func_list •
    5 func_list: func_list • func

    INT     shift, and go to state 9
    CHAR    shift, and go to state 10
    FLOAT   shift, and go to state 11
    STRING  shift, and go to state 12
    BOOL    shift, and go to state 13
    VOID    shift, and go to state 14

    $default  reduce using rule 4 (Program)

    func            go to state 15
    func_prefix     go to state 16
    func_data_type  go to state 17
    data_type       go to state 18


State 8

    2 headerfileInclude: INCLUDE HEADERFILE headerfileInclude •

    $default  reduce using rule 2 (headerfileInclude)


State 9

   58 data_type: INT •

    $default  reduce using rule 58 (data_type)


State 10

   61 data_type: CHAR •

    $default  reduce using rule 61 (data_type)


State 11

   59 data_type: FLOAT •

    $default  reduce using rule 59 (data_type)


State 12

   60 data_type: STRING •

    $default  reduce using rule 60 (data_type)


State 13

   62 data_type: BOOL •

    $default  reduce using rule 62 (data_type)


State 14

   12 func_data_type: VOID •

    $default  reduce using rule 12 (func_data_type)


State 15

    5 func_list: func_list func •

    $default  reduce using rule 5 (func_list)


State 16

    8 func: func_prefix • OF $@1 stmt_list CF

    OF  shift, and go to state 19


State 17

   10 func_prefix: func_data_type • ID $@2 OC param_list CC

    ID  shift, and go to state 20


State 18

   11 func_data_type: data_type •

    $default  reduce using rule 11 (func_data_type)


State 19

    8 func: func_prefix OF • $@1 stmt_list CF

    $default  reduce using rule 7 ($@1)

    $@1  go to state 21


State 20

   10 func_prefix: func_data_type ID • $@2 OC param_list CC

    $default  reduce using rule 9 ($@2)

    $@2  go to state 22


State 21

    8 func: func_prefix OF $@1 • stmt_list CF

    INT        shift, and go to state 9
    CHAR       shift, and go to state 10
    FLOAT      shift, and go to state 11
    STRING     shift, and go to state 23
    BOOL       shift, and go to state 13
    RETURN     shift, and go to state 24
    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 27
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33
    OF         shift, and go to state 34
    OUTPUT     shift, and go to state 35
    INPUT      shift, and go to state 36
    SWITCH     shift, and go to state 37
    BREAK      shift, and go to state 38
    IF         shift, and go to state 39
    WHILE      shift, and go to state 40
    FOR        shift, and go to state 41
    CONTINUE   shift, and go to state 42
    TYPEOF     shift, and go to state 43
    FLEN       shift, and go to state 44
    MAC        shift, and go to state 45

    SCOL      reduce using rule 57 (return_stmt)
    $default  reduce using rule 19 (stmt_list)

    stmt_list        go to state 46
    stmt             go to state 47
    declaration      go to state 48
    return_stmt      go to state 49
    data_type        go to state 50
    expr             go to state 51
    postfix_expr     go to state 52
    unary_expr       go to state 53
    primary_expr     go to state 54
    unary_op         go to state 55
    const            go to state 56
    assign           go to state 57
    if_stmt          go to state 58
    switch_stmt      go to state 59
    while_loop_stmt  go to state 60
    for_loop_stmt    go to state 61
    func_call        go to state 62


State 22

   10 func_prefix: func_data_type ID $@2 • OC param_list CC

    OC  shift, and go to state 63


State 23

   39 declaration: STRING • ID SCOL
   40            | STRING • ID ASSIGN STR SCOL
   41            | STRING • ID ASSIGN expr SCOL
   60 data_type: STRING •

    ID  shift, and go to state 64

    ID  [reduce using rule 60 (data_type)]


State 24

   55 return_stmt: RETURN • expr
   56            | RETURN • STR

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 65
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    STR        shift, and go to state 66
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    expr          go to state 67
    postfix_expr  go to state 52
    unary_expr    go to state 53
    primary_expr  go to state 54
    unary_op      go to state 55
    const         go to state 56
    func_call     go to state 62


State 25

  102 const: INT_NUM •

    $default  reduce using rule 102 (const)


State 26

  103 const: FLOAT_NUM •

    $default  reduce using rule 103 (const)


State 27

   93 postfix_expr: ID • OS expr CS
   95 primary_expr: ID •
  105 assign: ID • ASSIGN expr
  106       | ID • OS expr CS ASSIGN expr
  144 func_call: ID • $@27 OC arg_list CC

    OS      shift, and go to state 68
    ASSIGN  shift, and go to state 69

    OC        reduce using rule 143 ($@27)
    $default  reduce using rule 95 (primary_expr)

    $@27  go to state 70


State 28

  100 unary_op: NOT •

    $default  reduce using rule 100 (unary_op)


State 29

   98 unary_op: ADD •

    $default  reduce using rule 98 (unary_op)


State 30

   99 unary_op: SUBTRACT •

    $default  reduce using rule 99 (unary_op)


State 31

  101 unary_op: NEGATION •

    $default  reduce using rule 101 (unary_op)


State 32

  104 const: CHARACTER •

    $default  reduce using rule 104 (const)


State 33

   97 primary_expr: OC • expr CC

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 65
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    expr          go to state 71
    postfix_expr  go to state 52
    unary_expr    go to state 53
    primary_expr  go to state 54
    unary_op      go to state 55
    const         go to state 56
    func_call     go to state 62


State 34

   48 declaration: OF • arr_values CF SCOL

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 72
    CHARACTER  shift, and go to state 32

    arr_values  go to state 73
    const       go to state 74


State 35

   32 stmt: OUTPUT • OC expr CC SCOL
   33     | OUTPUT • OC STR CC SCOL

    OC  shift, and go to state 75


State 36

   30 stmt: INPUT • OC ID CC SCOL
   31     | INPUT • OC ID OS expr CS CC SCOL

    OC  shift, and go to state 76


State 37

  126 switch_stmt: SWITCH • $@15 OC ID $@16 CC OF case_stmt_list $@17 default_stmt CF

    $default  reduce using rule 123 ($@15)

    $@15  go to state 77


State 38

   27 stmt: BREAK • SCOL

    SCOL  shift, and go to state 78


State 39

  113 if_stmt: IF • $@6 OC expr CC $@7 OF $@8 stmt_list CF $@9 elif_stmt else_stmt

    $default  reduce using rule 109 ($@6)

    $@6  go to state 79


State 40

  137 while_loop_stmt: WHILE • $@20 OC expr CC $@21 OF $@22 stmt_list CF

    $default  reduce using rule 134 ($@20)

    $@20  go to state 80


State 41

  142 for_loop_stmt: FOR • OC assign SCOL $@23 expr SCOL $@24 assign CC $@25 OF $@26 stmt_list CF

    OC  shift, and go to state 81


State 42

   28 stmt: CONTINUE • SCOL

    SCOL  shift, and go to state 82


State 43

   34 stmt: TYPEOF • ID SCOL

    ID  shift, and go to state 83


State 44

   37 declaration: FLEN • OC ID CC ASSIGN ID SCOL

    OC  shift, and go to state 84


State 45

   47 declaration: MAC • RESET SCOL

    RESET  shift, and go to state 85


State 46

    8 func: func_prefix OF $@1 stmt_list • CF

    CF  shift, and go to state 86


State 47

   18 stmt_list: stmt • stmt_list

    INT        shift, and go to state 9
    CHAR       shift, and go to state 10
    FLOAT      shift, and go to state 11
    STRING     shift, and go to state 23
    BOOL       shift, and go to state 13
    RETURN     shift, and go to state 24
    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 27
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33
    OF         shift, and go to state 34
    OUTPUT     shift, and go to state 35
    INPUT      shift, and go to state 36
    SWITCH     shift, and go to state 37
    BREAK      shift, and go to state 38
    IF         shift, and go to state 39
    WHILE      shift, and go to state 40
    FOR        shift, and go to state 41
    CONTINUE   shift, and go to state 42
    TYPEOF     shift, and go to state 43
    FLEN       shift, and go to state 44
    MAC        shift, and go to state 45

    SCOL      reduce using rule 57 (return_stmt)
    $default  reduce using rule 19 (stmt_list)

    stmt_list        go to state 87
    stmt             go to state 47
    declaration      go to state 48
    return_stmt      go to state 49
    data_type        go to state 50
    expr             go to state 51
    postfix_expr     go to state 52
    unary_expr       go to state 53
    primary_expr     go to state 54
    unary_op         go to state 55
    const            go to state 56
    assign           go to state 57
    if_stmt          go to state 58
    switch_stmt      go to state 59
    while_loop_stmt  go to state 60
    for_loop_stmt    go to state 61
    func_call        go to state 62


State 48

   20 stmt: declaration •
  108 assign: declaration •

    SCOL      reduce using rule 20 (stmt)
    SCOL      [reduce using rule 108 (assign)]
    $default  reduce using rule 20 (stmt)


State 49

   23 stmt: return_stmt • SCOL

    SCOL  shift, and go to state 88


State 50

   35 declaration: data_type • ID SCOL
   36            | data_type • ID ASSIGN FLEN OC STR CC SCOL
   38            | data_type • ID ASSIGN FLEN OC ID CC SCOL
   42            | data_type • ID ASSIGN expr SCOL
   43            | data_type • ID assign ID SCOL
   44            | data_type • ID OS INT_NUM CS SCOL
   45            | data_type • ID OS INT_NUM CS ASSIGN
   46            | data_type • ID OS CHARACTER CS ASSIGN

    ID  shift, and go to state 89


State 51

   22 stmt: expr • SCOL
   63 expr: expr • ADD expr
   64     | expr • SUBTRACT expr
   65     | expr • MULTIPLY expr
   66     | expr • DIVIDE expr
   67     | expr • MACOP expr
   68     | expr • LE expr
   69     | expr • LE FLEN OC ID CC
   70     | expr • GE expr
   71     | expr • GE FLEN OC ID CC
   72     | expr • LT expr
   73     | expr • LT FLEN OC ID CC
   74     | expr • GT expr
   75     | expr • GT FLEN OC ID CC
   76     | expr • EQ expr
   77     | expr • EQ FLEN OC ID CC
   78     | expr • NE FLEN OC ID CC
   79     | expr • NE expr
   80     | expr • AND expr
   81     | expr • OR expr
   82     | expr • MODULO expr
   83     | expr • BITAND expr
   84     | expr • BITOR expr
   85     | expr • XOR expr
   86     | expr • LEFTSHIFT expr
   87     | expr • RIGHTSHIFT expr
   91     | expr • ADD ADD
  107 assign: expr •

    LEFTSHIFT   shift, and go to state 90
    RIGHTSHIFT  shift, and go to state 91
    LE          shift, and go to state 92
    GE          shift, and go to state 93
    EQ          shift, and go to state 94
    NE          shift, and go to state 95
    GT          shift, and go to state 96
    LT          shift, and go to state 97
    AND         shift, and go to state 98
    OR          shift, and go to state 99
    ADD         shift, and go to state 100
    SUBTRACT    shift, and go to state 101
    DIVIDE      shift, and go to state 102
    MULTIPLY    shift, and go to state 103
    MODULO      shift, and go to state 104
    BITAND      shift, and go to state 105
    BITOR       shift, and go to state 106
    XOR         shift, and go to state 107
    SCOL        shift, and go to state 108
    MACOP       shift, and go to state 109

    SCOL  [reduce using rule 107 (assign)]


State 52

   90 expr: postfix_expr •

    $default  reduce using rule 90 (expr)


State 53

   88 expr: unary_expr •

    $default  reduce using rule 88 (expr)


State 54

   89 expr: primary_expr •

    $default  reduce using rule 89 (expr)


State 55

   94 unary_expr: unary_op • primary_expr

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 110
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    primary_expr  go to state 111
    const         go to state 56


State 56

   96 primary_expr: const •

    $default  reduce using rule 96 (primary_expr)


State 57

   21 stmt: assign • SCOL

    SCOL  shift, and go to state 112


State 58

   24 stmt: if_stmt •

    $default  reduce using rule 24 (stmt)


State 59

   29 stmt: switch_stmt •

    $default  reduce using rule 29 (stmt)


State 60

   25 stmt: while_loop_stmt •

    $default  reduce using rule 25 (stmt)


State 61

   26 stmt: for_loop_stmt •

    $default  reduce using rule 26 (stmt)


State 62

   92 postfix_expr: func_call •

    $default  reduce using rule 92 (postfix_expr)


State 63

   10 func_prefix: func_data_type ID $@2 OC • param_list CC

    INT     shift, and go to state 9
    CHAR    shift, and go to state 10
    FLOAT   shift, and go to state 11
    STRING  shift, and go to state 12
    BOOL    shift, and go to state 13

    $default  reduce using rule 16 (param_list)

    param_list  go to state 113
    param       go to state 114
    data_type   go to state 115


State 64

   39 declaration: STRING ID • SCOL
   40            | STRING ID • ASSIGN STR SCOL
   41            | STRING ID • ASSIGN expr SCOL

    SCOL    shift, and go to state 116
    ASSIGN  shift, and go to state 117


State 65

   93 postfix_expr: ID • OS expr CS
   95 primary_expr: ID •
  144 func_call: ID • $@27 OC arg_list CC

    OS  shift, and go to state 118

    OC        reduce using rule 143 ($@27)
    $default  reduce using rule 95 (primary_expr)

    $@27  go to state 70


State 66

   56 return_stmt: RETURN STR •

    $default  reduce using rule 56 (return_stmt)


State 67

   55 return_stmt: RETURN expr •
   63 expr: expr • ADD expr
   64     | expr • SUBTRACT expr
   65     | expr • MULTIPLY expr
   66     | expr • DIVIDE expr
   67     | expr • MACOP expr
   68     | expr • LE expr
   69     | expr • LE FLEN OC ID CC
   70     | expr • GE expr
   71     | expr • GE FLEN OC ID CC
   72     | expr • LT expr
   73     | expr • LT FLEN OC ID CC
   74     | expr • GT expr
   75     | expr • GT FLEN OC ID CC
   76     | expr • EQ expr
   77     | expr • EQ FLEN OC ID CC
   78     | expr • NE FLEN OC ID CC
   79     | expr • NE expr
   80     | expr • AND expr
   81     | expr • OR expr
   82     | expr • MODULO expr
   83     | expr • BITAND expr
   84     | expr • BITOR expr
   85     | expr • XOR expr
   86     | expr • LEFTSHIFT expr
   87     | expr • RIGHTSHIFT expr
   91     | expr • ADD ADD

    LEFTSHIFT   shift, and go to state 90
    RIGHTSHIFT  shift, and go to state 91
    LE          shift, and go to state 92
    GE          shift, and go to state 93
    EQ          shift, and go to state 94
    NE          shift, and go to state 95
    GT          shift, and go to state 96
    LT          shift, and go to state 97
    AND         shift, and go to state 98
    OR          shift, and go to state 99
    ADD         shift, and go to state 100
    SUBTRACT    shift, and go to state 101
    DIVIDE      shift, and go to state 102
    MULTIPLY    shift, and go to state 103
    MODULO      shift, and go to state 104
    BITAND      shift, and go to state 105
    BITOR       shift, and go to state 106
    XOR         shift, and go to state 107
    MACOP       shift, and go to state 109

    $default  reduce using rule 55 (return_stmt)


State 68

   93 postfix_expr: ID OS • expr CS
  106 assign: ID OS • expr CS ASSIGN expr

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 65
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    expr          go to state 119
    postfix_expr  go to state 52
    unary_expr    go to state 53
    primary_expr  go to state 54
    unary_op      go to state 55
    const         go to state 56
    func_call     go to state 62


State 69

  105 assign: ID ASSIGN • expr

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 65
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    expr          go to state 120
    postfix_expr  go to state 52
    unary_expr    go to state 53
    primary_expr  go to state 54
    unary_op      go to state 55
    const         go to state 56
    func_call     go to state 62


State 70

  144 func_call: ID $@27 • OC arg_list CC

    OC  shift, and go to state 121


State 71

   63 expr: expr • ADD expr
   64     | expr • SUBTRACT expr
   65     | expr • MULTIPLY expr
   66     | expr • DIVIDE expr
   67     | expr • MACOP expr
   68     | expr • LE expr
   69     | expr • LE FLEN OC ID CC
   70     | expr • GE expr
   71     | expr • GE FLEN OC ID CC
   72     | expr • LT expr
   73     | expr • LT FLEN OC ID CC
   74     | expr • GT expr
   75     | expr • GT FLEN OC ID CC
   76     | expr • EQ expr
   77     | expr • EQ FLEN OC ID CC
   78     | expr • NE FLEN OC ID CC
   79     | expr • NE expr
   80     | expr • AND expr
   81     | expr • OR expr
   82     | expr • MODULO expr
   83     | expr • BITAND expr
   84     | expr • BITOR expr
   85     | expr • XOR expr
   86     | expr • LEFTSHIFT expr
   87     | expr • RIGHTSHIFT expr
   91     | expr • ADD ADD
   97 primary_expr: OC expr • CC

    LEFTSHIFT   shift, and go to state 90
    RIGHTSHIFT  shift, and go to state 91
    LE          shift, and go to state 92
    GE          shift, and go to state 93
    EQ          shift, and go to state 94
    NE          shift, and go to state 95
    GT          shift, and go to state 96
    LT          shift, and go to state 97
    AND         shift, and go to state 98
    OR          shift, and go to state 99
    ADD         shift, and go to state 100
    SUBTRACT    shift, and go to state 101
    DIVIDE      shift, and go to state 102
    MULTIPLY    shift, and go to state 103
    MODULO      shift, and go to state 104
    BITAND      shift, and go to state 105
    BITOR       shift, and go to state 106
    XOR         shift, and go to state 107
    CC          shift, and go to state 122
    MACOP       shift, and go to state 109


State 72

   53 arr_values: ID • $@5 COMMA arr_values
   54           | ID •

    CF        reduce using rule 54 (arr_values)
    $default  reduce using rule 52 ($@5)

    $@5  go to state 123


State 73

   48 declaration: OF arr_values • CF SCOL

    CF  shift, and go to state 124


State 74

   50 arr_values: const • $@4 COMMA arr_values
   51           | const •

    CF        reduce using rule 51 (arr_values)
    $default  reduce using rule 49 ($@4)

    $@4  go to state 125


State 75

   32 stmt: OUTPUT OC • expr CC SCOL
   33     | OUTPUT OC • STR CC SCOL

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 65
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    STR        shift, and go to state 126
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    expr          go to state 127
    postfix_expr  go to state 52
    unary_expr    go to state 53
    primary_expr  go to state 54
    unary_op      go to state 55
    const         go to state 56
    func_call     go to state 62


State 76

   30 stmt: INPUT OC • ID CC SCOL
   31     | INPUT OC • ID OS expr CS CC SCOL

    ID  shift, and go to state 128


State 77

  126 switch_stmt: SWITCH $@15 • OC ID $@16 CC OF case_stmt_list $@17 default_stmt CF

    OC  shift, and go to state 129


State 78

   27 stmt: BREAK SCOL •

    $default  reduce using rule 27 (stmt)


State 79

  113 if_stmt: IF $@6 • OC expr CC $@7 OF $@8 stmt_list CF $@9 elif_stmt else_stmt

    OC  shift, and go to state 130


State 80

  137 while_loop_stmt: WHILE $@20 • OC expr CC $@21 OF $@22 stmt_list CF

    OC  shift, and go to state 131


State 81

  142 for_loop_stmt: FOR OC • assign SCOL $@23 expr SCOL $@24 assign CC $@25 OF $@26 stmt_list CF

    INT        shift, and go to state 9
    CHAR       shift, and go to state 10
    FLOAT      shift, and go to state 11
    STRING     shift, and go to state 23
    BOOL       shift, and go to state 13
    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 27
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33
    OF         shift, and go to state 34
    FLEN       shift, and go to state 44
    MAC        shift, and go to state 45

    declaration   go to state 132
    data_type     go to state 50
    expr          go to state 133
    postfix_expr  go to state 52
    unary_expr    go to state 53
    primary_expr  go to state 54
    unary_op      go to state 55
    const         go to state 56
    assign        go to state 134
    func_call     go to state 62


State 82

   28 stmt: CONTINUE SCOL •

    $default  reduce using rule 28 (stmt)


State 83

   34 stmt: TYPEOF ID • SCOL

    SCOL  shift, and go to state 135


State 84

   37 declaration: FLEN OC • ID CC ASSIGN ID SCOL

    ID  shift, and go to state 136


State 85

   47 declaration: MAC RESET • SCOL

    SCOL  shift, and go to state 137


State 86

    8 func: func_prefix OF $@1 stmt_list CF •

    $default  reduce using rule 8 (func)


State 87

   18 stmt_list: stmt stmt_list •

    $default  reduce using rule 18 (stmt_list)


State 88

   23 stmt: return_stmt SCOL •

    $default  reduce using rule 23 (stmt)


State 89

   35 declaration: data_type ID • SCOL
   36            | data_type ID • ASSIGN FLEN OC STR CC SCOL
   38            | data_type ID • ASSIGN FLEN OC ID CC SCOL
   42            | data_type ID • ASSIGN expr SCOL
   43            | data_type ID • assign ID SCOL
   44            | data_type ID • OS INT_NUM CS SCOL
   45            | data_type ID • OS INT_NUM CS ASSIGN
   46            | data_type ID • OS CHARACTER CS ASSIGN

    INT        shift, and go to state 9
    CHAR       shift, and go to state 10
    FLOAT      shift, and go to state 11
    STRING     shift, and go to state 23
    BOOL       shift, and go to state 13
    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 27
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33
    OS         shift, and go to state 138
    OF         shift, and go to state 34
    SCOL       shift, and go to state 139
    FLEN       shift, and go to state 44
    MAC        shift, and go to state 45
    ASSIGN     shift, and go to state 140

    declaration   go to state 132
    data_type     go to state 50
    expr          go to state 133
    postfix_expr  go to state 52
    unary_expr    go to state 53
    primary_expr  go to state 54
    unary_op      go to state 55
    const         go to state 56
    assign        go to state 141
    func_call     go to state 62


State 90

   86 expr: expr LEFTSHIFT • expr

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 65
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    expr          go to state 142
    postfix_expr  go to state 52
    unary_expr    go to state 53
    primary_expr  go to state 54
    unary_op      go to state 55
    const         go to state 56
    func_call     go to state 62


State 91

   87 expr: expr RIGHTSHIFT • expr

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 65
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    expr          go to state 143
    postfix_expr  go to state 52
    unary_expr    go to state 53
    primary_expr  go to state 54
    unary_op      go to state 55
    const         go to state 56
    func_call     go to state 62


State 92

   68 expr: expr LE • expr
   69     | expr LE • FLEN OC ID CC

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 65
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33
    FLEN       shift, and go to state 144

    expr          go to state 145
    postfix_expr  go to state 52
    unary_expr    go to state 53
    primary_expr  go to state 54
    unary_op      go to state 55
    const         go to state 56
    func_call     go to state 62


State 93

   70 expr: expr GE • expr
   71     | expr GE • FLEN OC ID CC

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 65
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33
    FLEN       shift, and go to state 146

    expr          go to state 147
    postfix_expr  go to state 52
    unary_expr    go to state 53
    primary_expr  go to state 54
    unary_op      go to state 55
    const         go to state 56
    func_call     go to state 62


State 94

   76 expr: expr EQ • expr
   77     | expr EQ • FLEN OC ID CC

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 65
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33
    FLEN       shift, and go to state 148

    expr          go to state 149
    postfix_expr  go to state 52
    unary_expr    go to state 53
    primary_expr  go to state 54
    unary_op      go to state 55
    const         go to state 56
    func_call     go to state 62


State 95

   78 expr: expr NE • FLEN OC ID CC
   79     | expr NE • expr

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 65
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33
    FLEN       shift, and go to state 150

    expr          go to state 151
    postfix_expr  go to state 52
    unary_expr    go to state 53
    primary_expr  go to state 54
    unary_op      go to state 55
    const         go to state 56
    func_call     go to state 62


State 96

   74 expr: expr GT • expr
   75     | expr GT • FLEN OC ID CC

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 65
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33
    FLEN       shift, and go to state 152

    expr          go to state 153
    postfix_expr  go to state 52
    unary_expr    go to state 53
    primary_expr  go to state 54
    unary_op      go to state 55
    const         go to state 56
    func_call     go to state 62


State 97

   72 expr: expr LT • expr
   73     | expr LT • FLEN OC ID CC

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 65
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33
    FLEN       shift, and go to state 154

    expr          go to state 155
    postfix_expr  go to state 52
    unary_expr    go to state 53
    primary_expr  go to state 54
    unary_op      go to state 55
    const         go to state 56
    func_call     go to state 62


State 98

   80 expr: expr AND • expr

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 65
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    expr          go to state 156
    postfix_expr  go to state 52
    unary_expr    go to state 53
    primary_expr  go to state 54
    unary_op      go to state 55
    const         go to state 56
    func_call     go to state 62


State 99

   81 expr: expr OR • expr

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 65
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    expr          go to state 157
    postfix_expr  go to state 52
    unary_expr    go to state 53
    primary_expr  go to state 54
    unary_op      go to state 55
    const         go to state 56
    func_call     go to state 62


State 100

   63 expr: expr ADD • expr
   91     | expr ADD • ADD

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 65
    NOT        shift, and go to state 28
    ADD        shift, and go to state 158
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    expr          go to state 159
    postfix_expr  go to state 52
    unary_expr    go to state 53
    primary_expr  go to state 54
    unary_op      go to state 55
    const         go to state 56
    func_call     go to state 62


State 101

   64 expr: expr SUBTRACT • expr

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 65
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    expr          go to state 160
    postfix_expr  go to state 52
    unary_expr    go to state 53
    primary_expr  go to state 54
    unary_op      go to state 55
    const         go to state 56
    func_call     go to state 62


State 102

   66 expr: expr DIVIDE • expr

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 65
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    expr          go to state 161
    postfix_expr  go to state 52
    unary_expr    go to state 53
    primary_expr  go to state 54
    unary_op      go to state 55
    const         go to state 56
    func_call     go to state 62


State 103

   65 expr: expr MULTIPLY • expr

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 65
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    expr          go to state 162
    postfix_expr  go to state 52
    unary_expr    go to state 53
    primary_expr  go to state 54
    unary_op      go to state 55
    const         go to state 56
    func_call     go to state 62


State 104

   82 expr: expr MODULO • expr

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 65
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    expr          go to state 163
    postfix_expr  go to state 52
    unary_expr    go to state 53
    primary_expr  go to state 54
    unary_op      go to state 55
    const         go to state 56
    func_call     go to state 62


State 105

   83 expr: expr BITAND • expr

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 65
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    expr          go to state 164
    postfix_expr  go to state 52
    unary_expr    go to state 53
    primary_expr  go to state 54
    unary_op      go to state 55
    const         go to state 56
    func_call     go to state 62


State 106

   84 expr: expr BITOR • expr

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 65
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    expr          go to state 165
    postfix_expr  go to state 52
    unary_expr    go to state 53
    primary_expr  go to state 54
    unary_op      go to state 55
    const         go to state 56
    func_call     go to state 62


State 107

   85 expr: expr XOR • expr

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 65
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    expr          go to state 166
    postfix_expr  go to state 52
    unary_expr    go to state 53
    primary_expr  go to state 54
    unary_op      go to state 55
    const         go to state 56
    func_call     go to state 62


State 108

   22 stmt: expr SCOL •

    $default  reduce using rule 22 (stmt)


State 109

   67 expr: expr MACOP • expr

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 65
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    expr          go to state 167
    postfix_expr  go to state 52
    unary_expr    go to state 53
    primary_expr  go to state 54
    unary_op      go to state 55
    const         go to state 56
    func_call     go to state 62


State 110

   95 primary_expr: ID •

    $default  reduce using rule 95 (primary_expr)


State 111

   94 unary_expr: unary_op primary_expr •

    $default  reduce using rule 94 (unary_expr)


State 112

   21 stmt: assign SCOL •

    $default  reduce using rule 21 (stmt)


State 113

   10 func_prefix: func_data_type ID $@2 OC param_list • CC

    CC  shift, and go to state 168


State 114

   14 param_list: param • $@3 COMMA param_list
   15           | param •

    CC        reduce using rule 15 (param_list)
    $default  reduce using rule 13 ($@3)

    $@3  go to state 169


State 115

   17 param: data_type • ID

    ID  shift, and go to state 170


State 116

   39 declaration: STRING ID SCOL •

    $default  reduce using rule 39 (declaration)


State 117

   40 declaration: STRING ID ASSIGN • STR SCOL
   41            | STRING ID ASSIGN • expr SCOL

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 65
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    STR        shift, and go to state 171
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    expr          go to state 172
    postfix_expr  go to state 52
    unary_expr    go to state 53
    primary_expr  go to state 54
    unary_op      go to state 55
    const         go to state 56
    func_call     go to state 62


State 118

   93 postfix_expr: ID OS • expr CS

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 65
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    expr          go to state 173
    postfix_expr  go to state 52
    unary_expr    go to state 53
    primary_expr  go to state 54
    unary_op      go to state 55
    const         go to state 56
    func_call     go to state 62


State 119

   63 expr: expr • ADD expr
   64     | expr • SUBTRACT expr
   65     | expr • MULTIPLY expr
   66     | expr • DIVIDE expr
   67     | expr • MACOP expr
   68     | expr • LE expr
   69     | expr • LE FLEN OC ID CC
   70     | expr • GE expr
   71     | expr • GE FLEN OC ID CC
   72     | expr • LT expr
   73     | expr • LT FLEN OC ID CC
   74     | expr • GT expr
   75     | expr • GT FLEN OC ID CC
   76     | expr • EQ expr
   77     | expr • EQ FLEN OC ID CC
   78     | expr • NE FLEN OC ID CC
   79     | expr • NE expr
   80     | expr • AND expr
   81     | expr • OR expr
   82     | expr • MODULO expr
   83     | expr • BITAND expr
   84     | expr • BITOR expr
   85     | expr • XOR expr
   86     | expr • LEFTSHIFT expr
   87     | expr • RIGHTSHIFT expr
   91     | expr • ADD ADD
   93 postfix_expr: ID OS expr • CS
  106 assign: ID OS expr • CS ASSIGN expr

    LEFTSHIFT   shift, and go to state 90
    RIGHTSHIFT  shift, and go to state 91
    LE          shift, and go to state 92
    GE          shift, and go to state 93
    EQ          shift, and go to state 94
    NE          shift, and go to state 95
    GT          shift, and go to state 96
    LT          shift, and go to state 97
    AND         shift, and go to state 98
    OR          shift, and go to state 99
    ADD         shift, and go to state 100
    SUBTRACT    shift, and go to state 101
    DIVIDE      shift, and go to state 102
    MULTIPLY    shift, and go to state 103
    MODULO      shift, and go to state 104
    BITAND      shift, and go to state 105
    BITOR       shift, and go to state 106
    XOR         shift, and go to state 107
    CS          shift, and go to state 174
    MACOP       shift, and go to state 109


State 120

   63 expr: expr • ADD expr
   64     | expr • SUBTRACT expr
   65     | expr • MULTIPLY expr
   66     | expr • DIVIDE expr
   67     | expr • MACOP expr
   68     | expr • LE expr
   69     | expr • LE FLEN OC ID CC
   70     | expr • GE expr
   71     | expr • GE FLEN OC ID CC
   72     | expr • LT expr
   73     | expr • LT FLEN OC ID CC
   74     | expr • GT expr
   75     | expr • GT FLEN OC ID CC
   76     | expr • EQ expr
   77     | expr • EQ FLEN OC ID CC
   78     | expr • NE FLEN OC ID CC
   79     | expr • NE expr
   80     | expr • AND expr
   81     | expr • OR expr
   82     | expr • MODULO expr
   83     | expr • BITAND expr
   84     | expr • BITOR expr
   85     | expr • XOR expr
   86     | expr • LEFTSHIFT expr
   87     | expr • RIGHTSHIFT expr
   91     | expr • ADD ADD
  105 assign: ID ASSIGN expr •

    LEFTSHIFT   shift, and go to state 90
    RIGHTSHIFT  shift, and go to state 91
    LE          shift, and go to state 92
    GE          shift, and go to state 93
    EQ          shift, and go to state 94
    NE          shift, and go to state 95
    GT          shift, and go to state 96
    LT          shift, and go to state 97
    AND         shift, and go to state 98
    OR          shift, and go to state 99
    ADD         shift, and go to state 100
    SUBTRACT    shift, and go to state 101
    DIVIDE      shift, and go to state 102
    MULTIPLY    shift, and go to state 103
    MODULO      shift, and go to state 104
    BITAND      shift, and go to state 105
    BITOR       shift, and go to state 106
    XOR         shift, and go to state 107
    MACOP       shift, and go to state 109

    $default  reduce using rule 105 (assign)


State 121

  144 func_call: ID $@27 OC • arg_list CC

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 65
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    $default  reduce using rule 147 (arg_list)

    expr          go to state 175
    postfix_expr  go to state 52
    unary_expr    go to state 53
    primary_expr  go to state 54
    unary_op      go to state 55
    const         go to state 56
    func_call     go to state 62
    arg_list      go to state 176
    arg           go to state 177


State 122

   97 primary_expr: OC expr CC •

    $default  reduce using rule 97 (primary_expr)


State 123

   53 arr_values: ID $@5 • COMMA arr_values

    COMMA  shift, and go to state 178


State 124

   48 declaration: OF arr_values CF • SCOL

    SCOL  shift, and go to state 179


State 125

   50 arr_values: const $@4 • COMMA arr_values

    COMMA  shift, and go to state 180


State 126

   33 stmt: OUTPUT OC STR • CC SCOL

    CC  shift, and go to state 181


State 127

   32 stmt: OUTPUT OC expr • CC SCOL
   63 expr: expr • ADD expr
   64     | expr • SUBTRACT expr
   65     | expr • MULTIPLY expr
   66     | expr • DIVIDE expr
   67     | expr • MACOP expr
   68     | expr • LE expr
   69     | expr • LE FLEN OC ID CC
   70     | expr • GE expr
   71     | expr • GE FLEN OC ID CC
   72     | expr • LT expr
   73     | expr • LT FLEN OC ID CC
   74     | expr • GT expr
   75     | expr • GT FLEN OC ID CC
   76     | expr • EQ expr
   77     | expr • EQ FLEN OC ID CC
   78     | expr • NE FLEN OC ID CC
   79     | expr • NE expr
   80     | expr • AND expr
   81     | expr • OR expr
   82     | expr • MODULO expr
   83     | expr • BITAND expr
   84     | expr • BITOR expr
   85     | expr • XOR expr
   86     | expr • LEFTSHIFT expr
   87     | expr • RIGHTSHIFT expr
   91     | expr • ADD ADD

    LEFTSHIFT   shift, and go to state 90
    RIGHTSHIFT  shift, and go to state 91
    LE          shift, and go to state 92
    GE          shift, and go to state 93
    EQ          shift, and go to state 94
    NE          shift, and go to state 95
    GT          shift, and go to state 96
    LT          shift, and go to state 97
    AND         shift, and go to state 98
    OR          shift, and go to state 99
    ADD         shift, and go to state 100
    SUBTRACT    shift, and go to state 101
    DIVIDE      shift, and go to state 102
    MULTIPLY    shift, and go to state 103
    MODULO      shift, and go to state 104
    BITAND      shift, and go to state 105
    BITOR       shift, and go to state 106
    XOR         shift, and go to state 107
    CC          shift, and go to state 182
    MACOP       shift, and go to state 109


State 128

   30 stmt: INPUT OC ID • CC SCOL
   31     | INPUT OC ID • OS expr CS CC SCOL

    CC  shift, and go to state 183
    OS  shift, and go to state 184


State 129

  126 switch_stmt: SWITCH $@15 OC • ID $@16 CC OF case_stmt_list $@17 default_stmt CF

    ID  shift, and go to state 185


State 130

  113 if_stmt: IF $@6 OC • expr CC $@7 OF $@8 stmt_list CF $@9 elif_stmt else_stmt

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 65
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    expr          go to state 186
    postfix_expr  go to state 52
    unary_expr    go to state 53
    primary_expr  go to state 54
    unary_op      go to state 55
    const         go to state 56
    func_call     go to state 62


State 131

  137 while_loop_stmt: WHILE $@20 OC • expr CC $@21 OF $@22 stmt_list CF

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 65
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    expr          go to state 187
    postfix_expr  go to state 52
    unary_expr    go to state 53
    primary_expr  go to state 54
    unary_op      go to state 55
    const         go to state 56
    func_call     go to state 62


State 132

  108 assign: declaration •

    $default  reduce using rule 108 (assign)


State 133

   63 expr: expr • ADD expr
   64     | expr • SUBTRACT expr
   65     | expr • MULTIPLY expr
   66     | expr • DIVIDE expr
   67     | expr • MACOP expr
   68     | expr • LE expr
   69     | expr • LE FLEN OC ID CC
   70     | expr • GE expr
   71     | expr • GE FLEN OC ID CC
   72     | expr • LT expr
   73     | expr • LT FLEN OC ID CC
   74     | expr • GT expr
   75     | expr • GT FLEN OC ID CC
   76     | expr • EQ expr
   77     | expr • EQ FLEN OC ID CC
   78     | expr • NE FLEN OC ID CC
   79     | expr • NE expr
   80     | expr • AND expr
   81     | expr • OR expr
   82     | expr • MODULO expr
   83     | expr • BITAND expr
   84     | expr • BITOR expr
   85     | expr • XOR expr
   86     | expr • LEFTSHIFT expr
   87     | expr • RIGHTSHIFT expr
   91     | expr • ADD ADD
  107 assign: expr •

    LEFTSHIFT   shift, and go to state 90
    RIGHTSHIFT  shift, and go to state 91
    LE          shift, and go to state 92
    GE          shift, and go to state 93
    EQ          shift, and go to state 94
    NE          shift, and go to state 95
    GT          shift, and go to state 96
    LT          shift, and go to state 97
    AND         shift, and go to state 98
    OR          shift, and go to state 99
    ADD         shift, and go to state 100
    SUBTRACT    shift, and go to state 101
    DIVIDE      shift, and go to state 102
    MULTIPLY    shift, and go to state 103
    MODULO      shift, and go to state 104
    BITAND      shift, and go to state 105
    BITOR       shift, and go to state 106
    XOR         shift, and go to state 107
    MACOP       shift, and go to state 109

    $default  reduce using rule 107 (assign)


State 134

  142 for_loop_stmt: FOR OC assign • SCOL $@23 expr SCOL $@24 assign CC $@25 OF $@26 stmt_list CF

    SCOL  shift, and go to state 188


State 135

   34 stmt: TYPEOF ID SCOL •

    $default  reduce using rule 34 (stmt)


State 136

   37 declaration: FLEN OC ID • CC ASSIGN ID SCOL

    CC  shift, and go to state 189


State 137

   47 declaration: MAC RESET SCOL •

    $default  reduce using rule 47 (declaration)


State 138

   44 declaration: data_type ID OS • INT_NUM CS SCOL
   45            | data_type ID OS • INT_NUM CS ASSIGN
   46            | data_type ID OS • CHARACTER CS ASSIGN

    INT_NUM    shift, and go to state 190
    CHARACTER  shift, and go to state 191


State 139

   35 declaration: data_type ID SCOL •

    $default  reduce using rule 35 (declaration)


State 140

   36 declaration: data_type ID ASSIGN • FLEN OC STR CC SCOL
   38            | data_type ID ASSIGN • FLEN OC ID CC SCOL
   42            | data_type ID ASSIGN • expr SCOL

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 65
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33
    FLEN       shift, and go to state 192

    expr          go to state 193
    postfix_expr  go to state 52
    unary_expr    go to state 53
    primary_expr  go to state 54
    unary_op      go to state 55
    const         go to state 56
    func_call     go to state 62


State 141

   43 declaration: data_type ID assign • ID SCOL

    ID  shift, and go to state 194


State 142

   63 expr: expr • ADD expr
   64     | expr • SUBTRACT expr
   65     | expr • MULTIPLY expr
   66     | expr • DIVIDE expr
   67     | expr • MACOP expr
   68     | expr • LE expr
   69     | expr • LE FLEN OC ID CC
   70     | expr • GE expr
   71     | expr • GE FLEN OC ID CC
   72     | expr • LT expr
   73     | expr • LT FLEN OC ID CC
   74     | expr • GT expr
   75     | expr • GT FLEN OC ID CC
   76     | expr • EQ expr
   77     | expr • EQ FLEN OC ID CC
   78     | expr • NE FLEN OC ID CC
   79     | expr • NE expr
   80     | expr • AND expr
   81     | expr • OR expr
   82     | expr • MODULO expr
   83     | expr • BITAND expr
   84     | expr • BITOR expr
   85     | expr • XOR expr
   86     | expr • LEFTSHIFT expr
   86     | expr LEFTSHIFT expr •
   87     | expr • RIGHTSHIFT expr
   91     | expr • ADD ADD

    ADD       shift, and go to state 100
    SUBTRACT  shift, and go to state 101
    DIVIDE    shift, and go to state 102
    MULTIPLY  shift, and go to state 103
    MODULO    shift, and go to state 104
    MACOP     shift, and go to state 109

    MACOP     [reduce using rule 86 (expr)]
    $default  reduce using rule 86 (expr)


State 143

   63 expr: expr • ADD expr
   64     | expr • SUBTRACT expr
   65     | expr • MULTIPLY expr
   66     | expr • DIVIDE expr
   67     | expr • MACOP expr
   68     | expr • LE expr
   69     | expr • LE FLEN OC ID CC
   70     | expr • GE expr
   71     | expr • GE FLEN OC ID CC
   72     | expr • LT expr
   73     | expr • LT FLEN OC ID CC
   74     | expr • GT expr
   75     | expr • GT FLEN OC ID CC
   76     | expr • EQ expr
   77     | expr • EQ FLEN OC ID CC
   78     | expr • NE FLEN OC ID CC
   79     | expr • NE expr
   80     | expr • AND expr
   81     | expr • OR expr
   82     | expr • MODULO expr
   83     | expr • BITAND expr
   84     | expr • BITOR expr
   85     | expr • XOR expr
   86     | expr • LEFTSHIFT expr
   87     | expr • RIGHTSHIFT expr
   87     | expr RIGHTSHIFT expr •
   91     | expr • ADD ADD

    ADD       shift, and go to state 100
    SUBTRACT  shift, and go to state 101
    DIVIDE    shift, and go to state 102
    MULTIPLY  shift, and go to state 103
    MODULO    shift, and go to state 104
    MACOP     shift, and go to state 109

    MACOP     [reduce using rule 87 (expr)]
    $default  reduce using rule 87 (expr)


State 144

   69 expr: expr LE FLEN • OC ID CC

    OC  shift, and go to state 195


State 145

   63 expr: expr • ADD expr
   64     | expr • SUBTRACT expr
   65     | expr • MULTIPLY expr
   66     | expr • DIVIDE expr
   67     | expr • MACOP expr
   68     | expr • LE expr
   68     | expr LE expr •
   69     | expr • LE FLEN OC ID CC
   70     | expr • GE expr
   71     | expr • GE FLEN OC ID CC
   72     | expr • LT expr
   73     | expr • LT FLEN OC ID CC
   74     | expr • GT expr
   75     | expr • GT FLEN OC ID CC
   76     | expr • EQ expr
   77     | expr • EQ FLEN OC ID CC
   78     | expr • NE FLEN OC ID CC
   79     | expr • NE expr
   80     | expr • AND expr
   81     | expr • OR expr
   82     | expr • MODULO expr
   83     | expr • BITAND expr
   84     | expr • BITOR expr
   85     | expr • XOR expr
   86     | expr • LEFTSHIFT expr
   87     | expr • RIGHTSHIFT expr
   91     | expr • ADD ADD

    LEFTSHIFT   shift, and go to state 90
    RIGHTSHIFT  shift, and go to state 91
    ADD         shift, and go to state 100
    SUBTRACT    shift, and go to state 101
    DIVIDE      shift, and go to state 102
    MULTIPLY    shift, and go to state 103
    MODULO      shift, and go to state 104
    MACOP       shift, and go to state 109

    MACOP     [reduce using rule 68 (expr)]
    $default  reduce using rule 68 (expr)


State 146

   71 expr: expr GE FLEN • OC ID CC

    OC  shift, and go to state 196


State 147

   63 expr: expr • ADD expr
   64     | expr • SUBTRACT expr
   65     | expr • MULTIPLY expr
   66     | expr • DIVIDE expr
   67     | expr • MACOP expr
   68     | expr • LE expr
   69     | expr • LE FLEN OC ID CC
   70     | expr • GE expr
   70     | expr GE expr •
   71     | expr • GE FLEN OC ID CC
   72     | expr • LT expr
   73     | expr • LT FLEN OC ID CC
   74     | expr • GT expr
   75     | expr • GT FLEN OC ID CC
   76     | expr • EQ expr
   77     | expr • EQ FLEN OC ID CC
   78     | expr • NE FLEN OC ID CC
   79     | expr • NE expr
   80     | expr • AND expr
   81     | expr • OR expr
   82     | expr • MODULO expr
   83     | expr • BITAND expr
   84     | expr • BITOR expr
   85     | expr • XOR expr
   86     | expr • LEFTSHIFT expr
   87     | expr • RIGHTSHIFT expr
   91     | expr • ADD ADD

    LEFTSHIFT   shift, and go to state 90
    RIGHTSHIFT  shift, and go to state 91
    ADD         shift, and go to state 100
    SUBTRACT    shift, and go to state 101
    DIVIDE      shift, and go to state 102
    MULTIPLY    shift, and go to state 103
    MODULO      shift, and go to state 104
    MACOP       shift, and go to state 109

    MACOP     [reduce using rule 70 (expr)]
    $default  reduce using rule 70 (expr)


State 148

   77 expr: expr EQ FLEN • OC ID CC

    OC  shift, and go to state 197


State 149

   63 expr: expr • ADD expr
   64     | expr • SUBTRACT expr
   65     | expr • MULTIPLY expr
   66     | expr • DIVIDE expr
   67     | expr • MACOP expr
   68     | expr • LE expr
   69     | expr • LE FLEN OC ID CC
   70     | expr • GE expr
   71     | expr • GE FLEN OC ID CC
   72     | expr • LT expr
   73     | expr • LT FLEN OC ID CC
   74     | expr • GT expr
   75     | expr • GT FLEN OC ID CC
   76     | expr • EQ expr
   76     | expr EQ expr •
   77     | expr • EQ FLEN OC ID CC
   78     | expr • NE FLEN OC ID CC
   79     | expr • NE expr
   80     | expr • AND expr
   81     | expr • OR expr
   82     | expr • MODULO expr
   83     | expr • BITAND expr
   84     | expr • BITOR expr
   85     | expr • XOR expr
   86     | expr • LEFTSHIFT expr
   87     | expr • RIGHTSHIFT expr
   91     | expr • ADD ADD

    LEFTSHIFT   shift, and go to state 90
    RIGHTSHIFT  shift, and go to state 91
    LE          shift, and go to state 92
    GE          shift, and go to state 93
    GT          shift, and go to state 96
    LT          shift, and go to state 97
    ADD         shift, and go to state 100
    SUBTRACT    shift, and go to state 101
    DIVIDE      shift, and go to state 102
    MULTIPLY    shift, and go to state 103
    MODULO      shift, and go to state 104
    MACOP       shift, and go to state 109

    MACOP     [reduce using rule 76 (expr)]
    $default  reduce using rule 76 (expr)


State 150

   78 expr: expr NE FLEN • OC ID CC

    OC  shift, and go to state 198


State 151

   63 expr: expr • ADD expr
   64     | expr • SUBTRACT expr
   65     | expr • MULTIPLY expr
   66     | expr • DIVIDE expr
   67     | expr • MACOP expr
   68     | expr • LE expr
   69     | expr • LE FLEN OC ID CC
   70     | expr • GE expr
   71     | expr • GE FLEN OC ID CC
   72     | expr • LT expr
   73     | expr • LT FLEN OC ID CC
   74     | expr • GT expr
   75     | expr • GT FLEN OC ID CC
   76     | expr • EQ expr
   77     | expr • EQ FLEN OC ID CC
   78     | expr • NE FLEN OC ID CC
   79     | expr • NE expr
   79     | expr NE expr •
   80     | expr • AND expr
   81     | expr • OR expr
   82     | expr • MODULO expr
   83     | expr • BITAND expr
   84     | expr • BITOR expr
   85     | expr • XOR expr
   86     | expr • LEFTSHIFT expr
   87     | expr • RIGHTSHIFT expr
   91     | expr • ADD ADD

    LEFTSHIFT   shift, and go to state 90
    RIGHTSHIFT  shift, and go to state 91
    LE          shift, and go to state 92
    GE          shift, and go to state 93
    GT          shift, and go to state 96
    LT          shift, and go to state 97
    ADD         shift, and go to state 100
    SUBTRACT    shift, and go to state 101
    DIVIDE      shift, and go to state 102
    MULTIPLY    shift, and go to state 103
    MODULO      shift, and go to state 104
    MACOP       shift, and go to state 109

    MACOP     [reduce using rule 79 (expr)]
    $default  reduce using rule 79 (expr)


State 152

   75 expr: expr GT FLEN • OC ID CC

    OC  shift, and go to state 199


State 153

   63 expr: expr • ADD expr
   64     | expr • SUBTRACT expr
   65     | expr • MULTIPLY expr
   66     | expr • DIVIDE expr
   67     | expr • MACOP expr
   68     | expr • LE expr
   69     | expr • LE FLEN OC ID CC
   70     | expr • GE expr
   71     | expr • GE FLEN OC ID CC
   72     | expr • LT expr
   73     | expr • LT FLEN OC ID CC
   74     | expr • GT expr
   74     | expr GT expr •
   75     | expr • GT FLEN OC ID CC
   76     | expr • EQ expr
   77     | expr • EQ FLEN OC ID CC
   78     | expr • NE FLEN OC ID CC
   79     | expr • NE expr
   80     | expr • AND expr
   81     | expr • OR expr
   82     | expr • MODULO expr
   83     | expr • BITAND expr
   84     | expr • BITOR expr
   85     | expr • XOR expr
   86     | expr • LEFTSHIFT expr
   87     | expr • RIGHTSHIFT expr
   91     | expr • ADD ADD

    LEFTSHIFT   shift, and go to state 90
    RIGHTSHIFT  shift, and go to state 91
    ADD         shift, and go to state 100
    SUBTRACT    shift, and go to state 101
    DIVIDE      shift, and go to state 102
    MULTIPLY    shift, and go to state 103
    MODULO      shift, and go to state 104
    MACOP       shift, and go to state 109

    MACOP     [reduce using rule 74 (expr)]
    $default  reduce using rule 74 (expr)


State 154

   73 expr: expr LT FLEN • OC ID CC

    OC  shift, and go to state 200


State 155

   63 expr: expr • ADD expr
   64     | expr • SUBTRACT expr
   65     | expr • MULTIPLY expr
   66     | expr • DIVIDE expr
   67     | expr • MACOP expr
   68     | expr • LE expr
   69     | expr • LE FLEN OC ID CC
   70     | expr • GE expr
   71     | expr • GE FLEN OC ID CC
   72     | expr • LT expr
   72     | expr LT expr •
   73     | expr • LT FLEN OC ID CC
   74     | expr • GT expr
   75     | expr • GT FLEN OC ID CC
   76     | expr • EQ expr
   77     | expr • EQ FLEN OC ID CC
   78     | expr • NE FLEN OC ID CC
   79     | expr • NE expr
   80     | expr • AND expr
   81     | expr • OR expr
   82     | expr • MODULO expr
   83     | expr • BITAND expr
   84     | expr • BITOR expr
   85     | expr • XOR expr
   86     | expr • LEFTSHIFT expr
   87     | expr • RIGHTSHIFT expr
   91     | expr • ADD ADD

    LEFTSHIFT   shift, and go to state 90
    RIGHTSHIFT  shift, and go to state 91
    ADD         shift, and go to state 100
    SUBTRACT    shift, and go to state 101
    DIVIDE      shift, and go to state 102
    MULTIPLY    shift, and go to state 103
    MODULO      shift, and go to state 104
    MACOP       shift, and go to state 109

    MACOP     [reduce using rule 72 (expr)]
    $default  reduce using rule 72 (expr)


State 156

   63 expr: expr • ADD expr
   64     | expr • SUBTRACT expr
   65     | expr • MULTIPLY expr
   66     | expr • DIVIDE expr
   67     | expr • MACOP expr
   68     | expr • LE expr
   69     | expr • LE FLEN OC ID CC
   70     | expr • GE expr
   71     | expr • GE FLEN OC ID CC
   72     | expr • LT expr
   73     | expr • LT FLEN OC ID CC
   74     | expr • GT expr
   75     | expr • GT FLEN OC ID CC
   76     | expr • EQ expr
   77     | expr • EQ FLEN OC ID CC
   78     | expr • NE FLEN OC ID CC
   79     | expr • NE expr
   80     | expr • AND expr
   80     | expr AND expr •
   81     | expr • OR expr
   82     | expr • MODULO expr
   83     | expr • BITAND expr
   84     | expr • BITOR expr
   85     | expr • XOR expr
   86     | expr • LEFTSHIFT expr
   87     | expr • RIGHTSHIFT expr
   91     | expr • ADD ADD

    LEFTSHIFT   shift, and go to state 90
    RIGHTSHIFT  shift, and go to state 91
    LE          shift, and go to state 92
    GE          shift, and go to state 93
    EQ          shift, and go to state 94
    NE          shift, and go to state 95
    GT          shift, and go to state 96
    LT          shift, and go to state 97
    ADD         shift, and go to state 100
    SUBTRACT    shift, and go to state 101
    DIVIDE      shift, and go to state 102
    MULTIPLY    shift, and go to state 103
    MODULO      shift, and go to state 104
    BITAND      shift, and go to state 105
    BITOR       shift, and go to state 106
    XOR         shift, and go to state 107
    MACOP       shift, and go to state 109

    MACOP     [reduce using rule 80 (expr)]
    $default  reduce using rule 80 (expr)


State 157

   63 expr: expr • ADD expr
   64     | expr • SUBTRACT expr
   65     | expr • MULTIPLY expr
   66     | expr • DIVIDE expr
   67     | expr • MACOP expr
   68     | expr • LE expr
   69     | expr • LE FLEN OC ID CC
   70     | expr • GE expr
   71     | expr • GE FLEN OC ID CC
   72     | expr • LT expr
   73     | expr • LT FLEN OC ID CC
   74     | expr • GT expr
   75     | expr • GT FLEN OC ID CC
   76     | expr • EQ expr
   77     | expr • EQ FLEN OC ID CC
   78     | expr • NE FLEN OC ID CC
   79     | expr • NE expr
   80     | expr • AND expr
   81     | expr • OR expr
   81     | expr OR expr •
   82     | expr • MODULO expr
   83     | expr • BITAND expr
   84     | expr • BITOR expr
   85     | expr • XOR expr
   86     | expr • LEFTSHIFT expr
   87     | expr • RIGHTSHIFT expr
   91     | expr • ADD ADD

    LEFTSHIFT   shift, and go to state 90
    RIGHTSHIFT  shift, and go to state 91
    LE          shift, and go to state 92
    GE          shift, and go to state 93
    EQ          shift, and go to state 94
    NE          shift, and go to state 95
    GT          shift, and go to state 96
    LT          shift, and go to state 97
    AND         shift, and go to state 98
    ADD         shift, and go to state 100
    SUBTRACT    shift, and go to state 101
    DIVIDE      shift, and go to state 102
    MULTIPLY    shift, and go to state 103
    MODULO      shift, and go to state 104
    BITAND      shift, and go to state 105
    BITOR       shift, and go to state 106
    XOR         shift, and go to state 107
    MACOP       shift, and go to state 109

    MACOP     [reduce using rule 81 (expr)]
    $default  reduce using rule 81 (expr)


State 158

   91 expr: expr ADD ADD •
   98 unary_op: ADD •

    INT_NUM    reduce using rule 98 (unary_op)
    FLOAT_NUM  reduce using rule 98 (unary_op)
    ID         reduce using rule 91 (expr)
    ID         [reduce using rule 98 (unary_op)]
    CHARACTER  reduce using rule 98 (unary_op)
    OC         reduce using rule 98 (unary_op)
    $default   reduce using rule 91 (expr)


State 159

   63 expr: expr • ADD expr
   63     | expr ADD expr •
   64     | expr • SUBTRACT expr
   65     | expr • MULTIPLY expr
   66     | expr • DIVIDE expr
   67     | expr • MACOP expr
   68     | expr • LE expr
   69     | expr • LE FLEN OC ID CC
   70     | expr • GE expr
   71     | expr • GE FLEN OC ID CC
   72     | expr • LT expr
   73     | expr • LT FLEN OC ID CC
   74     | expr • GT expr
   75     | expr • GT FLEN OC ID CC
   76     | expr • EQ expr
   77     | expr • EQ FLEN OC ID CC
   78     | expr • NE FLEN OC ID CC
   79     | expr • NE expr
   80     | expr • AND expr
   81     | expr • OR expr
   82     | expr • MODULO expr
   83     | expr • BITAND expr
   84     | expr • BITOR expr
   85     | expr • XOR expr
   86     | expr • LEFTSHIFT expr
   87     | expr • RIGHTSHIFT expr
   91     | expr • ADD ADD

    DIVIDE    shift, and go to state 102
    MULTIPLY  shift, and go to state 103
    MODULO    shift, and go to state 104
    MACOP     shift, and go to state 109

    MACOP     [reduce using rule 63 (expr)]
    $default  reduce using rule 63 (expr)


State 160

   63 expr: expr • ADD expr
   64     | expr • SUBTRACT expr
   64     | expr SUBTRACT expr •
   65     | expr • MULTIPLY expr
   66     | expr • DIVIDE expr
   67     | expr • MACOP expr
   68     | expr • LE expr
   69     | expr • LE FLEN OC ID CC
   70     | expr • GE expr
   71     | expr • GE FLEN OC ID CC
   72     | expr • LT expr
   73     | expr • LT FLEN OC ID CC
   74     | expr • GT expr
   75     | expr • GT FLEN OC ID CC
   76     | expr • EQ expr
   77     | expr • EQ FLEN OC ID CC
   78     | expr • NE FLEN OC ID CC
   79     | expr • NE expr
   80     | expr • AND expr
   81     | expr • OR expr
   82     | expr • MODULO expr
   83     | expr • BITAND expr
   84     | expr • BITOR expr
   85     | expr • XOR expr
   86     | expr • LEFTSHIFT expr
   87     | expr • RIGHTSHIFT expr
   91     | expr • ADD ADD

    DIVIDE    shift, and go to state 102
    MULTIPLY  shift, and go to state 103
    MODULO    shift, and go to state 104
    MACOP     shift, and go to state 109

    MACOP     [reduce using rule 64 (expr)]
    $default  reduce using rule 64 (expr)


State 161

   63 expr: expr • ADD expr
   64     | expr • SUBTRACT expr
   65     | expr • MULTIPLY expr
   66     | expr • DIVIDE expr
   66     | expr DIVIDE expr •
   67     | expr • MACOP expr
   68     | expr • LE expr
   69     | expr • LE FLEN OC ID CC
   70     | expr • GE expr
   71     | expr • GE FLEN OC ID CC
   72     | expr • LT expr
   73     | expr • LT FLEN OC ID CC
   74     | expr • GT expr
   75     | expr • GT FLEN OC ID CC
   76     | expr • EQ expr
   77     | expr • EQ FLEN OC ID CC
   78     | expr • NE FLEN OC ID CC
   79     | expr • NE expr
   80     | expr • AND expr
   81     | expr • OR expr
   82     | expr • MODULO expr
   83     | expr • BITAND expr
   84     | expr • BITOR expr
   85     | expr • XOR expr
   86     | expr • LEFTSHIFT expr
   87     | expr • RIGHTSHIFT expr
   91     | expr • ADD ADD

    MACOP  shift, and go to state 109

    MACOP     [reduce using rule 66 (expr)]
    $default  reduce using rule 66 (expr)


State 162

   63 expr: expr • ADD expr
   64     | expr • SUBTRACT expr
   65     | expr • MULTIPLY expr
   65     | expr MULTIPLY expr •
   66     | expr • DIVIDE expr
   67     | expr • MACOP expr
   68     | expr • LE expr
   69     | expr • LE FLEN OC ID CC
   70     | expr • GE expr
   71     | expr • GE FLEN OC ID CC
   72     | expr • LT expr
   73     | expr • LT FLEN OC ID CC
   74     | expr • GT expr
   75     | expr • GT FLEN OC ID CC
   76     | expr • EQ expr
   77     | expr • EQ FLEN OC ID CC
   78     | expr • NE FLEN OC ID CC
   79     | expr • NE expr
   80     | expr • AND expr
   81     | expr • OR expr
   82     | expr • MODULO expr
   83     | expr • BITAND expr
   84     | expr • BITOR expr
   85     | expr • XOR expr
   86     | expr • LEFTSHIFT expr
   87     | expr • RIGHTSHIFT expr
   91     | expr • ADD ADD

    MACOP  shift, and go to state 109

    MACOP     [reduce using rule 65 (expr)]
    $default  reduce using rule 65 (expr)


State 163

   63 expr: expr • ADD expr
   64     | expr • SUBTRACT expr
   65     | expr • MULTIPLY expr
   66     | expr • DIVIDE expr
   67     | expr • MACOP expr
   68     | expr • LE expr
   69     | expr • LE FLEN OC ID CC
   70     | expr • GE expr
   71     | expr • GE FLEN OC ID CC
   72     | expr • LT expr
   73     | expr • LT FLEN OC ID CC
   74     | expr • GT expr
   75     | expr • GT FLEN OC ID CC
   76     | expr • EQ expr
   77     | expr • EQ FLEN OC ID CC
   78     | expr • NE FLEN OC ID CC
   79     | expr • NE expr
   80     | expr • AND expr
   81     | expr • OR expr
   82     | expr • MODULO expr
   82     | expr MODULO expr •
   83     | expr • BITAND expr
   84     | expr • BITOR expr
   85     | expr • XOR expr
   86     | expr • LEFTSHIFT expr
   87     | expr • RIGHTSHIFT expr
   91     | expr • ADD ADD

    MACOP  shift, and go to state 109

    MACOP     [reduce using rule 82 (expr)]
    $default  reduce using rule 82 (expr)


State 164

   63 expr: expr • ADD expr
   64     | expr • SUBTRACT expr
   65     | expr • MULTIPLY expr
   66     | expr • DIVIDE expr
   67     | expr • MACOP expr
   68     | expr • LE expr
   69     | expr • LE FLEN OC ID CC
   70     | expr • GE expr
   71     | expr • GE FLEN OC ID CC
   72     | expr • LT expr
   73     | expr • LT FLEN OC ID CC
   74     | expr • GT expr
   75     | expr • GT FLEN OC ID CC
   76     | expr • EQ expr
   77     | expr • EQ FLEN OC ID CC
   78     | expr • NE FLEN OC ID CC
   79     | expr • NE expr
   80     | expr • AND expr
   81     | expr • OR expr
   82     | expr • MODULO expr
   83     | expr • BITAND expr
   83     | expr BITAND expr •
   84     | expr • BITOR expr
   85     | expr • XOR expr
   86     | expr • LEFTSHIFT expr
   87     | expr • RIGHTSHIFT expr
   91     | expr • ADD ADD

    LEFTSHIFT   shift, and go to state 90
    RIGHTSHIFT  shift, and go to state 91
    LE          shift, and go to state 92
    GE          shift, and go to state 93
    EQ          shift, and go to state 94
    NE          shift, and go to state 95
    GT          shift, and go to state 96
    LT          shift, and go to state 97
    ADD         shift, and go to state 100
    SUBTRACT    shift, and go to state 101
    DIVIDE      shift, and go to state 102
    MULTIPLY    shift, and go to state 103
    MODULO      shift, and go to state 104
    MACOP       shift, and go to state 109

    MACOP     [reduce using rule 83 (expr)]
    $default  reduce using rule 83 (expr)


State 165

   63 expr: expr • ADD expr
   64     | expr • SUBTRACT expr
   65     | expr • MULTIPLY expr
   66     | expr • DIVIDE expr
   67     | expr • MACOP expr
   68     | expr • LE expr
   69     | expr • LE FLEN OC ID CC
   70     | expr • GE expr
   71     | expr • GE FLEN OC ID CC
   72     | expr • LT expr
   73     | expr • LT FLEN OC ID CC
   74     | expr • GT expr
   75     | expr • GT FLEN OC ID CC
   76     | expr • EQ expr
   77     | expr • EQ FLEN OC ID CC
   78     | expr • NE FLEN OC ID CC
   79     | expr • NE expr
   80     | expr • AND expr
   81     | expr • OR expr
   82     | expr • MODULO expr
   83     | expr • BITAND expr
   84     | expr • BITOR expr
   84     | expr BITOR expr •
   85     | expr • XOR expr
   86     | expr • LEFTSHIFT expr
   87     | expr • RIGHTSHIFT expr
   91     | expr • ADD ADD

    LEFTSHIFT   shift, and go to state 90
    RIGHTSHIFT  shift, and go to state 91
    LE          shift, and go to state 92
    GE          shift, and go to state 93
    EQ          shift, and go to state 94
    NE          shift, and go to state 95
    GT          shift, and go to state 96
    LT          shift, and go to state 97
    ADD         shift, and go to state 100
    SUBTRACT    shift, and go to state 101
    DIVIDE      shift, and go to state 102
    MULTIPLY    shift, and go to state 103
    MODULO      shift, and go to state 104
    BITAND      shift, and go to state 105
    XOR         shift, and go to state 107
    MACOP       shift, and go to state 109

    MACOP     [reduce using rule 84 (expr)]
    $default  reduce using rule 84 (expr)


State 166

   63 expr: expr • ADD expr
   64     | expr • SUBTRACT expr
   65     | expr • MULTIPLY expr
   66     | expr • DIVIDE expr
   67     | expr • MACOP expr
   68     | expr • LE expr
   69     | expr • LE FLEN OC ID CC
   70     | expr • GE expr
   71     | expr • GE FLEN OC ID CC
   72     | expr • LT expr
   73     | expr • LT FLEN OC ID CC
   74     | expr • GT expr
   75     | expr • GT FLEN OC ID CC
   76     | expr • EQ expr
   77     | expr • EQ FLEN OC ID CC
   78     | expr • NE FLEN OC ID CC
   79     | expr • NE expr
   80     | expr • AND expr
   81     | expr • OR expr
   82     | expr • MODULO expr
   83     | expr • BITAND expr
   84     | expr • BITOR expr
   85     | expr • XOR expr
   85     | expr XOR expr •
   86     | expr • LEFTSHIFT expr
   87     | expr • RIGHTSHIFT expr
   91     | expr • ADD ADD

    LEFTSHIFT   shift, and go to state 90
    RIGHTSHIFT  shift, and go to state 91
    LE          shift, and go to state 92
    GE          shift, and go to state 93
    EQ          shift, and go to state 94
    NE          shift, and go to state 95
    GT          shift, and go to state 96
    LT          shift, and go to state 97
    ADD         shift, and go to state 100
    SUBTRACT    shift, and go to state 101
    DIVIDE      shift, and go to state 102
    MULTIPLY    shift, and go to state 103
    MODULO      shift, and go to state 104
    BITAND      shift, and go to state 105
    MACOP       shift, and go to state 109

    MACOP     [reduce using rule 85 (expr)]
    $default  reduce using rule 85 (expr)


State 167

   63 expr: expr • ADD expr
   64     | expr • SUBTRACT expr
   65     | expr • MULTIPLY expr
   66     | expr • DIVIDE expr
   67     | expr • MACOP expr
   67     | expr MACOP expr •
   68     | expr • LE expr
   69     | expr • LE FLEN OC ID CC
   70     | expr • GE expr
   71     | expr • GE FLEN OC ID CC
   72     | expr • LT expr
   73     | expr • LT FLEN OC ID CC
   74     | expr • GT expr
   75     | expr • GT FLEN OC ID CC
   76     | expr • EQ expr
   77     | expr • EQ FLEN OC ID CC
   78     | expr • NE FLEN OC ID CC
   79     | expr • NE expr
   80     | expr • AND expr
   81     | expr • OR expr
   82     | expr • MODULO expr
   83     | expr • BITAND expr
   84     | expr • BITOR expr
   85     | expr • XOR expr
   86     | expr • LEFTSHIFT expr
   87     | expr • RIGHTSHIFT expr
   91     | expr • ADD ADD

    LEFTSHIFT   shift, and go to state 90
    RIGHTSHIFT  shift, and go to state 91
    LE          shift, and go to state 92
    GE          shift, and go to state 93
    EQ          shift, and go to state 94
    NE          shift, and go to state 95
    GT          shift, and go to state 96
    LT          shift, and go to state 97
    AND         shift, and go to state 98
    OR          shift, and go to state 99
    ADD         shift, and go to state 100
    SUBTRACT    shift, and go to state 101
    DIVIDE      shift, and go to state 102
    MULTIPLY    shift, and go to state 103
    MODULO      shift, and go to state 104
    BITAND      shift, and go to state 105
    BITOR       shift, and go to state 106
    XOR         shift, and go to state 107
    MACOP       shift, and go to state 109

    LEFTSHIFT   [reduce using rule 67 (expr)]
    RIGHTSHIFT  [reduce using rule 67 (expr)]
    LE          [reduce using rule 67 (expr)]
    GE          [reduce using rule 67 (expr)]
    EQ          [reduce using rule 67 (expr)]
    NE          [reduce using rule 67 (expr)]
    GT          [reduce using rule 67 (expr)]
    LT          [reduce using rule 67 (expr)]
    AND         [reduce using rule 67 (expr)]
    OR          [reduce using rule 67 (expr)]
    ADD         [reduce using rule 67 (expr)]
    SUBTRACT    [reduce using rule 67 (expr)]
    DIVIDE      [reduce using rule 67 (expr)]
    MULTIPLY    [reduce using rule 67 (expr)]
    MODULO      [reduce using rule 67 (expr)]
    BITAND      [reduce using rule 67 (expr)]
    BITOR       [reduce using rule 67 (expr)]
    XOR         [reduce using rule 67 (expr)]
    MACOP       [reduce using rule 67 (expr)]
    $default    reduce using rule 67 (expr)


State 168

   10 func_prefix: func_data_type ID $@2 OC param_list CC •

    $default  reduce using rule 10 (func_prefix)


State 169

   14 param_list: param $@3 • COMMA param_list

    COMMA  shift, and go to state 201


State 170

   17 param: data_type ID •

    $default  reduce using rule 17 (param)


State 171

   40 declaration: STRING ID ASSIGN STR • SCOL

    SCOL  shift, and go to state 202


State 172

   41 declaration: STRING ID ASSIGN expr • SCOL
   63 expr: expr • ADD expr
   64     | expr • SUBTRACT expr
   65     | expr • MULTIPLY expr
   66     | expr • DIVIDE expr
   67     | expr • MACOP expr
   68     | expr • LE expr
   69     | expr • LE FLEN OC ID CC
   70     | expr • GE expr
   71     | expr • GE FLEN OC ID CC
   72     | expr • LT expr
   73     | expr • LT FLEN OC ID CC
   74     | expr • GT expr
   75     | expr • GT FLEN OC ID CC
   76     | expr • EQ expr
   77     | expr • EQ FLEN OC ID CC
   78     | expr • NE FLEN OC ID CC
   79     | expr • NE expr
   80     | expr • AND expr
   81     | expr • OR expr
   82     | expr • MODULO expr
   83     | expr • BITAND expr
   84     | expr • BITOR expr
   85     | expr • XOR expr
   86     | expr • LEFTSHIFT expr
   87     | expr • RIGHTSHIFT expr
   91     | expr • ADD ADD

    LEFTSHIFT   shift, and go to state 90
    RIGHTSHIFT  shift, and go to state 91
    LE          shift, and go to state 92
    GE          shift, and go to state 93
    EQ          shift, and go to state 94
    NE          shift, and go to state 95
    GT          shift, and go to state 96
    LT          shift, and go to state 97
    AND         shift, and go to state 98
    OR          shift, and go to state 99
    ADD         shift, and go to state 100
    SUBTRACT    shift, and go to state 101
    DIVIDE      shift, and go to state 102
    MULTIPLY    shift, and go to state 103
    MODULO      shift, and go to state 104
    BITAND      shift, and go to state 105
    BITOR       shift, and go to state 106
    XOR         shift, and go to state 107
    SCOL        shift, and go to state 203
    MACOP       shift, and go to state 109


State 173

   63 expr: expr • ADD expr
   64     | expr • SUBTRACT expr
   65     | expr • MULTIPLY expr
   66     | expr • DIVIDE expr
   67     | expr • MACOP expr
   68     | expr • LE expr
   69     | expr • LE FLEN OC ID CC
   70     | expr • GE expr
   71     | expr • GE FLEN OC ID CC
   72     | expr • LT expr
   73     | expr • LT FLEN OC ID CC
   74     | expr • GT expr
   75     | expr • GT FLEN OC ID CC
   76     | expr • EQ expr
   77     | expr • EQ FLEN OC ID CC
   78     | expr • NE FLEN OC ID CC
   79     | expr • NE expr
   80     | expr • AND expr
   81     | expr • OR expr
   82     | expr • MODULO expr
   83     | expr • BITAND expr
   84     | expr • BITOR expr
   85     | expr • XOR expr
   86     | expr • LEFTSHIFT expr
   87     | expr • RIGHTSHIFT expr
   91     | expr • ADD ADD
   93 postfix_expr: ID OS expr • CS

    LEFTSHIFT   shift, and go to state 90
    RIGHTSHIFT  shift, and go to state 91
    LE          shift, and go to state 92
    GE          shift, and go to state 93
    EQ          shift, and go to state 94
    NE          shift, and go to state 95
    GT          shift, and go to state 96
    LT          shift, and go to state 97
    AND         shift, and go to state 98
    OR          shift, and go to state 99
    ADD         shift, and go to state 100
    SUBTRACT    shift, and go to state 101
    DIVIDE      shift, and go to state 102
    MULTIPLY    shift, and go to state 103
    MODULO      shift, and go to state 104
    BITAND      shift, and go to state 105
    BITOR       shift, and go to state 106
    XOR         shift, and go to state 107
    CS          shift, and go to state 204
    MACOP       shift, and go to state 109


State 174

   93 postfix_expr: ID OS expr CS •
  106 assign: ID OS expr CS • ASSIGN expr

    ASSIGN  shift, and go to state 205

    $default  reduce using rule 93 (postfix_expr)


State 175

   63 expr: expr • ADD expr
   64     | expr • SUBTRACT expr
   65     | expr • MULTIPLY expr
   66     | expr • DIVIDE expr
   67     | expr • MACOP expr
   68     | expr • LE expr
   69     | expr • LE FLEN OC ID CC
   70     | expr • GE expr
   71     | expr • GE FLEN OC ID CC
   72     | expr • LT expr
   73     | expr • LT FLEN OC ID CC
   74     | expr • GT expr
   75     | expr • GT FLEN OC ID CC
   76     | expr • EQ expr
   77     | expr • EQ FLEN OC ID CC
   78     | expr • NE FLEN OC ID CC
   79     | expr • NE expr
   80     | expr • AND expr
   81     | expr • OR expr
   82     | expr • MODULO expr
   83     | expr • BITAND expr
   84     | expr • BITOR expr
   85     | expr • XOR expr
   86     | expr • LEFTSHIFT expr
   87     | expr • RIGHTSHIFT expr
   91     | expr • ADD ADD
  148 arg: expr •

    LEFTSHIFT   shift, and go to state 90
    RIGHTSHIFT  shift, and go to state 91
    LE          shift, and go to state 92
    GE          shift, and go to state 93
    EQ          shift, and go to state 94
    NE          shift, and go to state 95
    GT          shift, and go to state 96
    LT          shift, and go to state 97
    AND         shift, and go to state 98
    OR          shift, and go to state 99
    ADD         shift, and go to state 100
    SUBTRACT    shift, and go to state 101
    DIVIDE      shift, and go to state 102
    MULTIPLY    shift, and go to state 103
    MODULO      shift, and go to state 104
    BITAND      shift, and go to state 105
    BITOR       shift, and go to state 106
    XOR         shift, and go to state 107
    MACOP       shift, and go to state 109

    $default  reduce using rule 148 (arg)


State 176

  144 func_call: ID $@27 OC arg_list • CC

    CC  shift, and go to state 206


State 177

  145 arg_list: arg • COMMA arg_list
  146         | arg •

    COMMA  shift, and go to state 207

    $default  reduce using rule 146 (arg_list)


State 178

   53 arr_values: ID $@5 COMMA • arr_values

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 72
    CHARACTER  shift, and go to state 32

    arr_values  go to state 208
    const       go to state 74


State 179

   48 declaration: OF arr_values CF SCOL •

    $default  reduce using rule 48 (declaration)


State 180

   50 arr_values: const $@4 COMMA • arr_values

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 72
    CHARACTER  shift, and go to state 32

    arr_values  go to state 209
    const       go to state 74


State 181

   33 stmt: OUTPUT OC STR CC • SCOL

    SCOL  shift, and go to state 210


State 182

   32 stmt: OUTPUT OC expr CC • SCOL

    SCOL  shift, and go to state 211


State 183

   30 stmt: INPUT OC ID CC • SCOL

    SCOL  shift, and go to state 212


State 184

   31 stmt: INPUT OC ID OS • expr CS CC SCOL

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 65
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    expr          go to state 213
    postfix_expr  go to state 52
    unary_expr    go to state 53
    primary_expr  go to state 54
    unary_op      go to state 55
    const         go to state 56
    func_call     go to state 62


State 185

  126 switch_stmt: SWITCH $@15 OC ID • $@16 CC OF case_stmt_list $@17 default_stmt CF

    $default  reduce using rule 124 ($@16)

    $@16  go to state 214


State 186

   63 expr: expr • ADD expr
   64     | expr • SUBTRACT expr
   65     | expr • MULTIPLY expr
   66     | expr • DIVIDE expr
   67     | expr • MACOP expr
   68     | expr • LE expr
   69     | expr • LE FLEN OC ID CC
   70     | expr • GE expr
   71     | expr • GE FLEN OC ID CC
   72     | expr • LT expr
   73     | expr • LT FLEN OC ID CC
   74     | expr • GT expr
   75     | expr • GT FLEN OC ID CC
   76     | expr • EQ expr
   77     | expr • EQ FLEN OC ID CC
   78     | expr • NE FLEN OC ID CC
   79     | expr • NE expr
   80     | expr • AND expr
   81     | expr • OR expr
   82     | expr • MODULO expr
   83     | expr • BITAND expr
   84     | expr • BITOR expr
   85     | expr • XOR expr
   86     | expr • LEFTSHIFT expr
   87     | expr • RIGHTSHIFT expr
   91     | expr • ADD ADD
  113 if_stmt: IF $@6 OC expr • CC $@7 OF $@8 stmt_list CF $@9 elif_stmt else_stmt

    LEFTSHIFT   shift, and go to state 90
    RIGHTSHIFT  shift, and go to state 91
    LE          shift, and go to state 92
    GE          shift, and go to state 93
    EQ          shift, and go to state 94
    NE          shift, and go to state 95
    GT          shift, and go to state 96
    LT          shift, and go to state 97
    AND         shift, and go to state 98
    OR          shift, and go to state 99
    ADD         shift, and go to state 100
    SUBTRACT    shift, and go to state 101
    DIVIDE      shift, and go to state 102
    MULTIPLY    shift, and go to state 103
    MODULO      shift, and go to state 104
    BITAND      shift, and go to state 105
    BITOR       shift, and go to state 106
    XOR         shift, and go to state 107
    CC          shift, and go to state 215
    MACOP       shift, and go to state 109


State 187

   63 expr: expr • ADD expr
   64     | expr • SUBTRACT expr
   65     | expr • MULTIPLY expr
   66     | expr • DIVIDE expr
   67     | expr • MACOP expr
   68     | expr • LE expr
   69     | expr • LE FLEN OC ID CC
   70     | expr • GE expr
   71     | expr • GE FLEN OC ID CC
   72     | expr • LT expr
   73     | expr • LT FLEN OC ID CC
   74     | expr • GT expr
   75     | expr • GT FLEN OC ID CC
   76     | expr • EQ expr
   77     | expr • EQ FLEN OC ID CC
   78     | expr • NE FLEN OC ID CC
   79     | expr • NE expr
   80     | expr • AND expr
   81     | expr • OR expr
   82     | expr • MODULO expr
   83     | expr • BITAND expr
   84     | expr • BITOR expr
   85     | expr • XOR expr
   86     | expr • LEFTSHIFT expr
   87     | expr • RIGHTSHIFT expr
   91     | expr • ADD ADD
  137 while_loop_stmt: WHILE $@20 OC expr • CC $@21 OF $@22 stmt_list CF

    LEFTSHIFT   shift, and go to state 90
    RIGHTSHIFT  shift, and go to state 91
    LE          shift, and go to state 92
    GE          shift, and go to state 93
    EQ          shift, and go to state 94
    NE          shift, and go to state 95
    GT          shift, and go to state 96
    LT          shift, and go to state 97
    AND         shift, and go to state 98
    OR          shift, and go to state 99
    ADD         shift, and go to state 100
    SUBTRACT    shift, and go to state 101
    DIVIDE      shift, and go to state 102
    MULTIPLY    shift, and go to state 103
    MODULO      shift, and go to state 104
    BITAND      shift, and go to state 105
    BITOR       shift, and go to state 106
    XOR         shift, and go to state 107
    CC          shift, and go to state 216
    MACOP       shift, and go to state 109


State 188

  142 for_loop_stmt: FOR OC assign SCOL • $@23 expr SCOL $@24 assign CC $@25 OF $@26 stmt_list CF

    $default  reduce using rule 138 ($@23)

    $@23  go to state 217


State 189

   37 declaration: FLEN OC ID CC • ASSIGN ID SCOL

    ASSIGN  shift, and go to state 218


State 190

   44 declaration: data_type ID OS INT_NUM • CS SCOL
   45            | data_type ID OS INT_NUM • CS ASSIGN

    CS  shift, and go to state 219


State 191

   46 declaration: data_type ID OS CHARACTER • CS ASSIGN

    CS  shift, and go to state 220


State 192

   36 declaration: data_type ID ASSIGN FLEN • OC STR CC SCOL
   38            | data_type ID ASSIGN FLEN • OC ID CC SCOL

    OC  shift, and go to state 221


State 193

   42 declaration: data_type ID ASSIGN expr • SCOL
   63 expr: expr • ADD expr
   64     | expr • SUBTRACT expr
   65     | expr • MULTIPLY expr
   66     | expr • DIVIDE expr
   67     | expr • MACOP expr
   68     | expr • LE expr
   69     | expr • LE FLEN OC ID CC
   70     | expr • GE expr
   71     | expr • GE FLEN OC ID CC
   72     | expr • LT expr
   73     | expr • LT FLEN OC ID CC
   74     | expr • GT expr
   75     | expr • GT FLEN OC ID CC
   76     | expr • EQ expr
   77     | expr • EQ FLEN OC ID CC
   78     | expr • NE FLEN OC ID CC
   79     | expr • NE expr
   80     | expr • AND expr
   81     | expr • OR expr
   82     | expr • MODULO expr
   83     | expr • BITAND expr
   84     | expr • BITOR expr
   85     | expr • XOR expr
   86     | expr • LEFTSHIFT expr
   87     | expr • RIGHTSHIFT expr
   91     | expr • ADD ADD

    LEFTSHIFT   shift, and go to state 90
    RIGHTSHIFT  shift, and go to state 91
    LE          shift, and go to state 92
    GE          shift, and go to state 93
    EQ          shift, and go to state 94
    NE          shift, and go to state 95
    GT          shift, and go to state 96
    LT          shift, and go to state 97
    AND         shift, and go to state 98
    OR          shift, and go to state 99
    ADD         shift, and go to state 100
    SUBTRACT    shift, and go to state 101
    DIVIDE      shift, and go to state 102
    MULTIPLY    shift, and go to state 103
    MODULO      shift, and go to state 104
    BITAND      shift, and go to state 105
    BITOR       shift, and go to state 106
    XOR         shift, and go to state 107
    SCOL        shift, and go to state 222
    MACOP       shift, and go to state 109


State 194

   43 declaration: data_type ID assign ID • SCOL

    SCOL  shift, and go to state 223


State 195

   69 expr: expr LE FLEN OC • ID CC

    ID  shift, and go to state 224


State 196

   71 expr: expr GE FLEN OC • ID CC

    ID  shift, and go to state 225


State 197

   77 expr: expr EQ FLEN OC • ID CC

    ID  shift, and go to state 226


State 198

   78 expr: expr NE FLEN OC • ID CC

    ID  shift, and go to state 227


State 199

   75 expr: expr GT FLEN OC • ID CC

    ID  shift, and go to state 228


State 200

   73 expr: expr LT FLEN OC • ID CC

    ID  shift, and go to state 229


State 201

   14 param_list: param $@3 COMMA • param_list

    INT     shift, and go to state 9
    CHAR    shift, and go to state 10
    FLOAT   shift, and go to state 11
    STRING  shift, and go to state 12
    BOOL    shift, and go to state 13

    $default  reduce using rule 16 (param_list)

    param_list  go to state 230
    param       go to state 114
    data_type   go to state 115


State 202

   40 declaration: STRING ID ASSIGN STR SCOL •

    $default  reduce using rule 40 (declaration)


State 203

   41 declaration: STRING ID ASSIGN expr SCOL •

    $default  reduce using rule 41 (declaration)


State 204

   93 postfix_expr: ID OS expr CS •

    $default  reduce using rule 93 (postfix_expr)


State 205

  106 assign: ID OS expr CS ASSIGN • expr

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 65
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    expr          go to state 231
    postfix_expr  go to state 52
    unary_expr    go to state 53
    primary_expr  go to state 54
    unary_op      go to state 55
    const         go to state 56
    func_call     go to state 62


State 206

  144 func_call: ID $@27 OC arg_list CC •

    $default  reduce using rule 144 (func_call)


State 207

  145 arg_list: arg COMMA • arg_list

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 65
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    $default  reduce using rule 147 (arg_list)

    expr          go to state 175
    postfix_expr  go to state 52
    unary_expr    go to state 53
    primary_expr  go to state 54
    unary_op      go to state 55
    const         go to state 56
    func_call     go to state 62
    arg_list      go to state 232
    arg           go to state 177


State 208

   53 arr_values: ID $@5 COMMA arr_values •

    $default  reduce using rule 53 (arr_values)


State 209

   50 arr_values: const $@4 COMMA arr_values •

    $default  reduce using rule 50 (arr_values)


State 210

   33 stmt: OUTPUT OC STR CC SCOL •

    $default  reduce using rule 33 (stmt)


State 211

   32 stmt: OUTPUT OC expr CC SCOL •

    $default  reduce using rule 32 (stmt)


State 212

   30 stmt: INPUT OC ID CC SCOL •

    $default  reduce using rule 30 (stmt)


State 213

   31 stmt: INPUT OC ID OS expr • CS CC SCOL
   63 expr: expr • ADD expr
   64     | expr • SUBTRACT expr
   65     | expr • MULTIPLY expr
   66     | expr • DIVIDE expr
   67     | expr • MACOP expr
   68     | expr • LE expr
   69     | expr • LE FLEN OC ID CC
   70     | expr • GE expr
   71     | expr • GE FLEN OC ID CC
   72     | expr • LT expr
   73     | expr • LT FLEN OC ID CC
   74     | expr • GT expr
   75     | expr • GT FLEN OC ID CC
   76     | expr • EQ expr
   77     | expr • EQ FLEN OC ID CC
   78     | expr • NE FLEN OC ID CC
   79     | expr • NE expr
   80     | expr • AND expr
   81     | expr • OR expr
   82     | expr • MODULO expr
   83     | expr • BITAND expr
   84     | expr • BITOR expr
   85     | expr • XOR expr
   86     | expr • LEFTSHIFT expr
   87     | expr • RIGHTSHIFT expr
   91     | expr • ADD ADD

    LEFTSHIFT   shift, and go to state 90
    RIGHTSHIFT  shift, and go to state 91
    LE          shift, and go to state 92
    GE          shift, and go to state 93
    EQ          shift, and go to state 94
    NE          shift, and go to state 95
    GT          shift, and go to state 96
    LT          shift, and go to state 97
    AND         shift, and go to state 98
    OR          shift, and go to state 99
    ADD         shift, and go to state 100
    SUBTRACT    shift, and go to state 101
    DIVIDE      shift, and go to state 102
    MULTIPLY    shift, and go to state 103
    MODULO      shift, and go to state 104
    BITAND      shift, and go to state 105
    BITOR       shift, and go to state 106
    XOR         shift, and go to state 107
    CS          shift, and go to state 233
    MACOP       shift, and go to state 109


State 214

  126 switch_stmt: SWITCH $@15 OC ID $@16 • CC OF case_stmt_list $@17 default_stmt CF

    CC  shift, and go to state 234


State 215

  113 if_stmt: IF $@6 OC expr CC • $@7 OF $@8 stmt_list CF $@9 elif_stmt else_stmt

    $default  reduce using rule 110 ($@7)

    $@7  go to state 235


State 216

  137 while_loop_stmt: WHILE $@20 OC expr CC • $@21 OF $@22 stmt_list CF

    $default  reduce using rule 135 ($@21)

    $@21  go to state 236


State 217

  142 for_loop_stmt: FOR OC assign SCOL $@23 • expr SCOL $@24 assign CC $@25 OF $@26 stmt_list CF

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 65
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    expr          go to state 237
    postfix_expr  go to state 52
    unary_expr    go to state 53
    primary_expr  go to state 54
    unary_op      go to state 55
    const         go to state 56
    func_call     go to state 62


State 218

   37 declaration: FLEN OC ID CC ASSIGN • ID SCOL

    ID  shift, and go to state 238


State 219

   44 declaration: data_type ID OS INT_NUM CS • SCOL
   45            | data_type ID OS INT_NUM CS • ASSIGN

    SCOL    shift, and go to state 239
    ASSIGN  shift, and go to state 240


State 220

   46 declaration: data_type ID OS CHARACTER CS • ASSIGN

    ASSIGN  shift, and go to state 241


State 221

   36 declaration: data_type ID ASSIGN FLEN OC • STR CC SCOL
   38            | data_type ID ASSIGN FLEN OC • ID CC SCOL

    ID   shift, and go to state 242
    STR  shift, and go to state 243


State 222

   42 declaration: data_type ID ASSIGN expr SCOL •

    $default  reduce using rule 42 (declaration)


State 223

   43 declaration: data_type ID assign ID SCOL •

    $default  reduce using rule 43 (declaration)


State 224

   69 expr: expr LE FLEN OC ID • CC

    CC  shift, and go to state 244


State 225

   71 expr: expr GE FLEN OC ID • CC

    CC  shift, and go to state 245


State 226

   77 expr: expr EQ FLEN OC ID • CC

    CC  shift, and go to state 246


State 227

   78 expr: expr NE FLEN OC ID • CC

    CC  shift, and go to state 247


State 228

   75 expr: expr GT FLEN OC ID • CC

    CC  shift, and go to state 248


State 229

   73 expr: expr LT FLEN OC ID • CC

    CC  shift, and go to state 249


State 230

   14 param_list: param $@3 COMMA param_list •

    $default  reduce using rule 14 (param_list)


State 231

   63 expr: expr • ADD expr
   64     | expr • SUBTRACT expr
   65     | expr • MULTIPLY expr
   66     | expr • DIVIDE expr
   67     | expr • MACOP expr
   68     | expr • LE expr
   69     | expr • LE FLEN OC ID CC
   70     | expr • GE expr
   71     | expr • GE FLEN OC ID CC
   72     | expr • LT expr
   73     | expr • LT FLEN OC ID CC
   74     | expr • GT expr
   75     | expr • GT FLEN OC ID CC
   76     | expr • EQ expr
   77     | expr • EQ FLEN OC ID CC
   78     | expr • NE FLEN OC ID CC
   79     | expr • NE expr
   80     | expr • AND expr
   81     | expr • OR expr
   82     | expr • MODULO expr
   83     | expr • BITAND expr
   84     | expr • BITOR expr
   85     | expr • XOR expr
   86     | expr • LEFTSHIFT expr
   87     | expr • RIGHTSHIFT expr
   91     | expr • ADD ADD
  106 assign: ID OS expr CS ASSIGN expr •

    LEFTSHIFT   shift, and go to state 90
    RIGHTSHIFT  shift, and go to state 91
    LE          shift, and go to state 92
    GE          shift, and go to state 93
    EQ          shift, and go to state 94
    NE          shift, and go to state 95
    GT          shift, and go to state 96
    LT          shift, and go to state 97
    AND         shift, and go to state 98
    OR          shift, and go to state 99
    ADD         shift, and go to state 100
    SUBTRACT    shift, and go to state 101
    DIVIDE      shift, and go to state 102
    MULTIPLY    shift, and go to state 103
    MODULO      shift, and go to state 104
    BITAND      shift, and go to state 105
    BITOR       shift, and go to state 106
    XOR         shift, and go to state 107
    MACOP       shift, and go to state 109

    $default  reduce using rule 106 (assign)


State 232

  145 arg_list: arg COMMA arg_list •

    $default  reduce using rule 145 (arg_list)


State 233

   31 stmt: INPUT OC ID OS expr CS • CC SCOL

    CC  shift, and go to state 250


State 234

  126 switch_stmt: SWITCH $@15 OC ID $@16 CC • OF case_stmt_list $@17 default_stmt CF

    OF  shift, and go to state 251


State 235

  113 if_stmt: IF $@6 OC expr CC $@7 • OF $@8 stmt_list CF $@9 elif_stmt else_stmt

    OF  shift, and go to state 252


State 236

  137 while_loop_stmt: WHILE $@20 OC expr CC $@21 • OF $@22 stmt_list CF

    OF  shift, and go to state 253


State 237

   63 expr: expr • ADD expr
   64     | expr • SUBTRACT expr
   65     | expr • MULTIPLY expr
   66     | expr • DIVIDE expr
   67     | expr • MACOP expr
   68     | expr • LE expr
   69     | expr • LE FLEN OC ID CC
   70     | expr • GE expr
   71     | expr • GE FLEN OC ID CC
   72     | expr • LT expr
   73     | expr • LT FLEN OC ID CC
   74     | expr • GT expr
   75     | expr • GT FLEN OC ID CC
   76     | expr • EQ expr
   77     | expr • EQ FLEN OC ID CC
   78     | expr • NE FLEN OC ID CC
   79     | expr • NE expr
   80     | expr • AND expr
   81     | expr • OR expr
   82     | expr • MODULO expr
   83     | expr • BITAND expr
   84     | expr • BITOR expr
   85     | expr • XOR expr
   86     | expr • LEFTSHIFT expr
   87     | expr • RIGHTSHIFT expr
   91     | expr • ADD ADD
  142 for_loop_stmt: FOR OC assign SCOL $@23 expr • SCOL $@24 assign CC $@25 OF $@26 stmt_list CF

    LEFTSHIFT   shift, and go to state 90
    RIGHTSHIFT  shift, and go to state 91
    LE          shift, and go to state 92
    GE          shift, and go to state 93
    EQ          shift, and go to state 94
    NE          shift, and go to state 95
    GT          shift, and go to state 96
    LT          shift, and go to state 97
    AND         shift, and go to state 98
    OR          shift, and go to state 99
    ADD         shift, and go to state 100
    SUBTRACT    shift, and go to state 101
    DIVIDE      shift, and go to state 102
    MULTIPLY    shift, and go to state 103
    MODULO      shift, and go to state 104
    BITAND      shift, and go to state 105
    BITOR       shift, and go to state 106
    XOR         shift, and go to state 107
    SCOL        shift, and go to state 254
    MACOP       shift, and go to state 109


State 238

   37 declaration: FLEN OC ID CC ASSIGN ID • SCOL

    SCOL  shift, and go to state 255


State 239

   44 declaration: data_type ID OS INT_NUM CS SCOL •

    $default  reduce using rule 44 (declaration)


State 240

   45 declaration: data_type ID OS INT_NUM CS ASSIGN •

    $default  reduce using rule 45 (declaration)


State 241

   46 declaration: data_type ID OS CHARACTER CS ASSIGN •

    $default  reduce using rule 46 (declaration)


State 242

   38 declaration: data_type ID ASSIGN FLEN OC ID • CC SCOL

    CC  shift, and go to state 256


State 243

   36 declaration: data_type ID ASSIGN FLEN OC STR • CC SCOL

    CC  shift, and go to state 257


State 244

   69 expr: expr LE FLEN OC ID CC •

    $default  reduce using rule 69 (expr)


State 245

   71 expr: expr GE FLEN OC ID CC •

    $default  reduce using rule 71 (expr)


State 246

   77 expr: expr EQ FLEN OC ID CC •

    $default  reduce using rule 77 (expr)


State 247

   78 expr: expr NE FLEN OC ID CC •

    $default  reduce using rule 78 (expr)


State 248

   75 expr: expr GT FLEN OC ID CC •

    $default  reduce using rule 75 (expr)


State 249

   73 expr: expr LT FLEN OC ID CC •

    $default  reduce using rule 73 (expr)


State 250

   31 stmt: INPUT OC ID OS expr CS CC • SCOL

    SCOL  shift, and go to state 258


State 251

  126 switch_stmt: SWITCH $@15 OC ID $@16 CC OF • case_stmt_list $@17 default_stmt CF

    CASE  shift, and go to state 259

    $default  reduce using rule 128 (case_stmt_list)

    case_stmt_list  go to state 260
    case_stmt       go to state 261


State 252

  113 if_stmt: IF $@6 OC expr CC $@7 OF • $@8 stmt_list CF $@9 elif_stmt else_stmt

    $default  reduce using rule 111 ($@8)

    $@8  go to state 262


State 253

  137 while_loop_stmt: WHILE $@20 OC expr CC $@21 OF • $@22 stmt_list CF

    $default  reduce using rule 136 ($@22)

    $@22  go to state 263


State 254

  142 for_loop_stmt: FOR OC assign SCOL $@23 expr SCOL • $@24 assign CC $@25 OF $@26 stmt_list CF

    $default  reduce using rule 139 ($@24)

    $@24  go to state 264


State 255

   37 declaration: FLEN OC ID CC ASSIGN ID SCOL •

    $default  reduce using rule 37 (declaration)


State 256

   38 declaration: data_type ID ASSIGN FLEN OC ID CC • SCOL

    SCOL  shift, and go to state 265


State 257

   36 declaration: data_type ID ASSIGN FLEN OC STR CC • SCOL

    SCOL  shift, and go to state 266


State 258

   31 stmt: INPUT OC ID OS expr CS CC SCOL •

    $default  reduce using rule 31 (stmt)


State 259

  131 case_stmt: CASE • $@18 OC const $@19 CC COLON stmt_list

    $default  reduce using rule 129 ($@18)

    $@18  go to state 267


State 260

  126 switch_stmt: SWITCH $@15 OC ID $@16 CC OF case_stmt_list • $@17 default_stmt CF

    $default  reduce using rule 125 ($@17)

    $@17  go to state 268


State 261

  127 case_stmt_list: case_stmt • case_stmt_list

    CASE  shift, and go to state 259

    $default  reduce using rule 128 (case_stmt_list)

    case_stmt_list  go to state 269
    case_stmt       go to state 261


State 262

  113 if_stmt: IF $@6 OC expr CC $@7 OF $@8 • stmt_list CF $@9 elif_stmt else_stmt

    INT        shift, and go to state 9
    CHAR       shift, and go to state 10
    FLOAT      shift, and go to state 11
    STRING     shift, and go to state 23
    BOOL       shift, and go to state 13
    RETURN     shift, and go to state 24
    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 27
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33
    OF         shift, and go to state 34
    OUTPUT     shift, and go to state 35
    INPUT      shift, and go to state 36
    SWITCH     shift, and go to state 37
    BREAK      shift, and go to state 38
    IF         shift, and go to state 39
    WHILE      shift, and go to state 40
    FOR        shift, and go to state 41
    CONTINUE   shift, and go to state 42
    TYPEOF     shift, and go to state 43
    FLEN       shift, and go to state 44
    MAC        shift, and go to state 45

    SCOL      reduce using rule 57 (return_stmt)
    $default  reduce using rule 19 (stmt_list)

    stmt_list        go to state 270
    stmt             go to state 47
    declaration      go to state 48
    return_stmt      go to state 49
    data_type        go to state 50
    expr             go to state 51
    postfix_expr     go to state 52
    unary_expr       go to state 53
    primary_expr     go to state 54
    unary_op         go to state 55
    const            go to state 56
    assign           go to state 57
    if_stmt          go to state 58
    switch_stmt      go to state 59
    while_loop_stmt  go to state 60
    for_loop_stmt    go to state 61
    func_call        go to state 62


State 263

  137 while_loop_stmt: WHILE $@20 OC expr CC $@21 OF $@22 • stmt_list CF

    INT        shift, and go to state 9
    CHAR       shift, and go to state 10
    FLOAT      shift, and go to state 11
    STRING     shift, and go to state 23
    BOOL       shift, and go to state 13
    RETURN     shift, and go to state 24
    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 27
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33
    OF         shift, and go to state 34
    OUTPUT     shift, and go to state 35
    INPUT      shift, and go to state 36
    SWITCH     shift, and go to state 37
    BREAK      shift, and go to state 38
    IF         shift, and go to state 39
    WHILE      shift, and go to state 40
    FOR        shift, and go to state 41
    CONTINUE   shift, and go to state 42
    TYPEOF     shift, and go to state 43
    FLEN       shift, and go to state 44
    MAC        shift, and go to state 45

    SCOL      reduce using rule 57 (return_stmt)
    $default  reduce using rule 19 (stmt_list)

    stmt_list        go to state 271
    stmt             go to state 47
    declaration      go to state 48
    return_stmt      go to state 49
    data_type        go to state 50
    expr             go to state 51
    postfix_expr     go to state 52
    unary_expr       go to state 53
    primary_expr     go to state 54
    unary_op         go to state 55
    const            go to state 56
    assign           go to state 57
    if_stmt          go to state 58
    switch_stmt      go to state 59
    while_loop_stmt  go to state 60
    for_loop_stmt    go to state 61
    func_call        go to state 62


State 264

  142 for_loop_stmt: FOR OC assign SCOL $@23 expr SCOL $@24 • assign CC $@25 OF $@26 stmt_list CF

    INT        shift, and go to state 9
    CHAR       shift, and go to state 10
    FLOAT      shift, and go to state 11
    STRING     shift, and go to state 23
    BOOL       shift, and go to state 13
    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 27
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33
    OF         shift, and go to state 34
    FLEN       shift, and go to state 44
    MAC        shift, and go to state 45

    declaration   go to state 132
    data_type     go to state 50
    expr          go to state 133
    postfix_expr  go to state 52
    unary_expr    go to state 53
    primary_expr  go to state 54
    unary_op      go to state 55
    const         go to state 56
    assign        go to state 272
    func_call     go to state 62


State 265

   38 declaration: data_type ID ASSIGN FLEN OC ID CC SCOL •

    $default  reduce using rule 38 (declaration)


State 266

   36 declaration: data_type ID ASSIGN FLEN OC STR CC SCOL •

    $default  reduce using rule 36 (declaration)


State 267

  131 case_stmt: CASE $@18 • OC const $@19 CC COLON stmt_list

    OC  shift, and go to state 273


State 268

  126 switch_stmt: SWITCH $@15 OC ID $@16 CC OF case_stmt_list $@17 • default_stmt CF

    DEFAULT  shift, and go to state 274

    $default  reduce using rule 133 (default_stmt)

    default_stmt  go to state 275


State 269

  127 case_stmt_list: case_stmt case_stmt_list •

    $default  reduce using rule 127 (case_stmt_list)


State 270

  113 if_stmt: IF $@6 OC expr CC $@7 OF $@8 stmt_list • CF $@9 elif_stmt else_stmt

    CF  shift, and go to state 276


State 271

  137 while_loop_stmt: WHILE $@20 OC expr CC $@21 OF $@22 stmt_list • CF

    CF  shift, and go to state 277


State 272

  142 for_loop_stmt: FOR OC assign SCOL $@23 expr SCOL $@24 assign • CC $@25 OF $@26 stmt_list CF

    CC  shift, and go to state 278


State 273

  131 case_stmt: CASE $@18 OC • const $@19 CC COLON stmt_list

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    CHARACTER  shift, and go to state 32

    const  go to state 279


State 274

  132 default_stmt: DEFAULT • COLON stmt_list

    COLON  shift, and go to state 280


State 275

  126 switch_stmt: SWITCH $@15 OC ID $@16 CC OF case_stmt_list $@17 default_stmt • CF

    CF  shift, and go to state 281


State 276

  113 if_stmt: IF $@6 OC expr CC $@7 OF $@8 stmt_list CF • $@9 elif_stmt else_stmt

    $default  reduce using rule 112 ($@9)

    $@9  go to state 282


State 277

  137 while_loop_stmt: WHILE $@20 OC expr CC $@21 OF $@22 stmt_list CF •

    $default  reduce using rule 137 (while_loop_stmt)


State 278

  142 for_loop_stmt: FOR OC assign SCOL $@23 expr SCOL $@24 assign CC • $@25 OF $@26 stmt_list CF

    $default  reduce using rule 140 ($@25)

    $@25  go to state 283


State 279

  131 case_stmt: CASE $@18 OC const • $@19 CC COLON stmt_list

    $default  reduce using rule 130 ($@19)

    $@19  go to state 284


State 280

  132 default_stmt: DEFAULT COLON • stmt_list

    INT        shift, and go to state 9
    CHAR       shift, and go to state 10
    FLOAT      shift, and go to state 11
    STRING     shift, and go to state 23
    BOOL       shift, and go to state 13
    RETURN     shift, and go to state 24
    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 27
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33
    OF         shift, and go to state 34
    OUTPUT     shift, and go to state 35
    INPUT      shift, and go to state 36
    SWITCH     shift, and go to state 37
    BREAK      shift, and go to state 38
    IF         shift, and go to state 39
    WHILE      shift, and go to state 40
    FOR        shift, and go to state 41
    CONTINUE   shift, and go to state 42
    TYPEOF     shift, and go to state 43
    FLEN       shift, and go to state 44
    MAC        shift, and go to state 45

    SCOL      reduce using rule 57 (return_stmt)
    $default  reduce using rule 19 (stmt_list)

    stmt_list        go to state 285
    stmt             go to state 47
    declaration      go to state 48
    return_stmt      go to state 49
    data_type        go to state 50
    expr             go to state 51
    postfix_expr     go to state 52
    unary_expr       go to state 53
    primary_expr     go to state 54
    unary_op         go to state 55
    const            go to state 56
    assign           go to state 57
    if_stmt          go to state 58
    switch_stmt      go to state 59
    while_loop_stmt  go to state 60
    for_loop_stmt    go to state 61
    func_call        go to state 62


State 281

  126 switch_stmt: SWITCH $@15 OC ID $@16 CC OF case_stmt_list $@17 default_stmt CF •

    $default  reduce using rule 126 (switch_stmt)


State 282

  113 if_stmt: IF $@6 OC expr CC $@7 OF $@8 stmt_list CF $@9 • elif_stmt else_stmt

    ELIF  shift, and go to state 286

    $default  reduce using rule 119 (elif_stmt)

    elif_stmt  go to state 287


State 283

  142 for_loop_stmt: FOR OC assign SCOL $@23 expr SCOL $@24 assign CC $@25 • OF $@26 stmt_list CF

    OF  shift, and go to state 288


State 284

  131 case_stmt: CASE $@18 OC const $@19 • CC COLON stmt_list

    CC  shift, and go to state 289


State 285

  132 default_stmt: DEFAULT COLON stmt_list •

    $default  reduce using rule 132 (default_stmt)


State 286

  118 elif_stmt: ELIF • $@10 OC expr CC $@11 OF $@12 stmt_list CF $@13 elif_stmt

    $default  reduce using rule 114 ($@10)

    $@10  go to state 290


State 287

  113 if_stmt: IF $@6 OC expr CC $@7 OF $@8 stmt_list CF $@9 elif_stmt • else_stmt

    ELSE  shift, and go to state 291

    $default  reduce using rule 122 (else_stmt)

    else_stmt  go to state 292


State 288

  142 for_loop_stmt: FOR OC assign SCOL $@23 expr SCOL $@24 assign CC $@25 OF • $@26 stmt_list CF

    $default  reduce using rule 141 ($@26)

    $@26  go to state 293


State 289

  131 case_stmt: CASE $@18 OC const $@19 CC • COLON stmt_list

    COLON  shift, and go to state 294


State 290

  118 elif_stmt: ELIF $@10 • OC expr CC $@11 OF $@12 stmt_list CF $@13 elif_stmt

    OC  shift, and go to state 295


State 291

  121 else_stmt: ELSE • OF $@14 stmt_list CF

    OF  shift, and go to state 296


State 292

  113 if_stmt: IF $@6 OC expr CC $@7 OF $@8 stmt_list CF $@9 elif_stmt else_stmt •

    $default  reduce using rule 113 (if_stmt)


State 293

  142 for_loop_stmt: FOR OC assign SCOL $@23 expr SCOL $@24 assign CC $@25 OF $@26 • stmt_list CF

    INT        shift, and go to state 9
    CHAR       shift, and go to state 10
    FLOAT      shift, and go to state 11
    STRING     shift, and go to state 23
    BOOL       shift, and go to state 13
    RETURN     shift, and go to state 24
    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 27
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33
    OF         shift, and go to state 34
    OUTPUT     shift, and go to state 35
    INPUT      shift, and go to state 36
    SWITCH     shift, and go to state 37
    BREAK      shift, and go to state 38
    IF         shift, and go to state 39
    WHILE      shift, and go to state 40
    FOR        shift, and go to state 41
    CONTINUE   shift, and go to state 42
    TYPEOF     shift, and go to state 43
    FLEN       shift, and go to state 44
    MAC        shift, and go to state 45

    SCOL      reduce using rule 57 (return_stmt)
    $default  reduce using rule 19 (stmt_list)

    stmt_list        go to state 297
    stmt             go to state 47
    declaration      go to state 48
    return_stmt      go to state 49
    data_type        go to state 50
    expr             go to state 51
    postfix_expr     go to state 52
    unary_expr       go to state 53
    primary_expr     go to state 54
    unary_op         go to state 55
    const            go to state 56
    assign           go to state 57
    if_stmt          go to state 58
    switch_stmt      go to state 59
    while_loop_stmt  go to state 60
    for_loop_stmt    go to state 61
    func_call        go to state 62


State 294

  131 case_stmt: CASE $@18 OC const $@19 CC COLON • stmt_list

    INT        shift, and go to state 9
    CHAR       shift, and go to state 10
    FLOAT      shift, and go to state 11
    STRING     shift, and go to state 23
    BOOL       shift, and go to state 13
    RETURN     shift, and go to state 24
    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 27
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33
    OF         shift, and go to state 34
    OUTPUT     shift, and go to state 35
    INPUT      shift, and go to state 36
    SWITCH     shift, and go to state 37
    BREAK      shift, and go to state 38
    IF         shift, and go to state 39
    WHILE      shift, and go to state 40
    FOR        shift, and go to state 41
    CONTINUE   shift, and go to state 42
    TYPEOF     shift, and go to state 43
    FLEN       shift, and go to state 44
    MAC        shift, and go to state 45

    SCOL      reduce using rule 57 (return_stmt)
    $default  reduce using rule 19 (stmt_list)

    stmt_list        go to state 298
    stmt             go to state 47
    declaration      go to state 48
    return_stmt      go to state 49
    data_type        go to state 50
    expr             go to state 51
    postfix_expr     go to state 52
    unary_expr       go to state 53
    primary_expr     go to state 54
    unary_op         go to state 55
    const            go to state 56
    assign           go to state 57
    if_stmt          go to state 58
    switch_stmt      go to state 59
    while_loop_stmt  go to state 60
    for_loop_stmt    go to state 61
    func_call        go to state 62


State 295

  118 elif_stmt: ELIF $@10 OC • expr CC $@11 OF $@12 stmt_list CF $@13 elif_stmt

    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 65
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33

    expr          go to state 299
    postfix_expr  go to state 52
    unary_expr    go to state 53
    primary_expr  go to state 54
    unary_op      go to state 55
    const         go to state 56
    func_call     go to state 62


State 296

  121 else_stmt: ELSE OF • $@14 stmt_list CF

    $default  reduce using rule 120 ($@14)

    $@14  go to state 300


State 297

  142 for_loop_stmt: FOR OC assign SCOL $@23 expr SCOL $@24 assign CC $@25 OF $@26 stmt_list • CF

    CF  shift, and go to state 301


State 298

  131 case_stmt: CASE $@18 OC const $@19 CC COLON stmt_list •

    $default  reduce using rule 131 (case_stmt)


State 299

   63 expr: expr • ADD expr
   64     | expr • SUBTRACT expr
   65     | expr • MULTIPLY expr
   66     | expr • DIVIDE expr
   67     | expr • MACOP expr
   68     | expr • LE expr
   69     | expr • LE FLEN OC ID CC
   70     | expr • GE expr
   71     | expr • GE FLEN OC ID CC
   72     | expr • LT expr
   73     | expr • LT FLEN OC ID CC
   74     | expr • GT expr
   75     | expr • GT FLEN OC ID CC
   76     | expr • EQ expr
   77     | expr • EQ FLEN OC ID CC
   78     | expr • NE FLEN OC ID CC
   79     | expr • NE expr
   80     | expr • AND expr
   81     | expr • OR expr
   82     | expr • MODULO expr
   83     | expr • BITAND expr
   84     | expr • BITOR expr
   85     | expr • XOR expr
   86     | expr • LEFTSHIFT expr
   87     | expr • RIGHTSHIFT expr
   91     | expr • ADD ADD
  118 elif_stmt: ELIF $@10 OC expr • CC $@11 OF $@12 stmt_list CF $@13 elif_stmt

    LEFTSHIFT   shift, and go to state 90
    RIGHTSHIFT  shift, and go to state 91
    LE          shift, and go to state 92
    GE          shift, and go to state 93
    EQ          shift, and go to state 94
    NE          shift, and go to state 95
    GT          shift, and go to state 96
    LT          shift, and go to state 97
    AND         shift, and go to state 98
    OR          shift, and go to state 99
    ADD         shift, and go to state 100
    SUBTRACT    shift, and go to state 101
    DIVIDE      shift, and go to state 102
    MULTIPLY    shift, and go to state 103
    MODULO      shift, and go to state 104
    BITAND      shift, and go to state 105
    BITOR       shift, and go to state 106
    XOR         shift, and go to state 107
    CC          shift, and go to state 302
    MACOP       shift, and go to state 109


State 300

  121 else_stmt: ELSE OF $@14 • stmt_list CF

    INT        shift, and go to state 9
    CHAR       shift, and go to state 10
    FLOAT      shift, and go to state 11
    STRING     shift, and go to state 23
    BOOL       shift, and go to state 13
    RETURN     shift, and go to state 24
    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 27
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33
    OF         shift, and go to state 34
    OUTPUT     shift, and go to state 35
    INPUT      shift, and go to state 36
    SWITCH     shift, and go to state 37
    BREAK      shift, and go to state 38
    IF         shift, and go to state 39
    WHILE      shift, and go to state 40
    FOR        shift, and go to state 41
    CONTINUE   shift, and go to state 42
    TYPEOF     shift, and go to state 43
    FLEN       shift, and go to state 44
    MAC        shift, and go to state 45

    SCOL      reduce using rule 57 (return_stmt)
    $default  reduce using rule 19 (stmt_list)

    stmt_list        go to state 303
    stmt             go to state 47
    declaration      go to state 48
    return_stmt      go to state 49
    data_type        go to state 50
    expr             go to state 51
    postfix_expr     go to state 52
    unary_expr       go to state 53
    primary_expr     go to state 54
    unary_op         go to state 55
    const            go to state 56
    assign           go to state 57
    if_stmt          go to state 58
    switch_stmt      go to state 59
    while_loop_stmt  go to state 60
    for_loop_stmt    go to state 61
    func_call        go to state 62


State 301

  142 for_loop_stmt: FOR OC assign SCOL $@23 expr SCOL $@24 assign CC $@25 OF $@26 stmt_list CF •

    $default  reduce using rule 142 (for_loop_stmt)


State 302

  118 elif_stmt: ELIF $@10 OC expr CC • $@11 OF $@12 stmt_list CF $@13 elif_stmt

    $default  reduce using rule 115 ($@11)

    $@11  go to state 304


State 303

  121 else_stmt: ELSE OF $@14 stmt_list • CF

    CF  shift, and go to state 305


State 304

  118 elif_stmt: ELIF $@10 OC expr CC $@11 • OF $@12 stmt_list CF $@13 elif_stmt

    OF  shift, and go to state 306


State 305

  121 else_stmt: ELSE OF $@14 stmt_list CF •

    $default  reduce using rule 121 (else_stmt)


State 306

  118 elif_stmt: ELIF $@10 OC expr CC $@11 OF • $@12 stmt_list CF $@13 elif_stmt

    $default  reduce using rule 116 ($@12)

    $@12  go to state 307


State 307

  118 elif_stmt: ELIF $@10 OC expr CC $@11 OF $@12 • stmt_list CF $@13 elif_stmt

    INT        shift, and go to state 9
    CHAR       shift, and go to state 10
    FLOAT      shift, and go to state 11
    STRING     shift, and go to state 23
    BOOL       shift, and go to state 13
    RETURN     shift, and go to state 24
    INT_NUM    shift, and go to state 25
    FLOAT_NUM  shift, and go to state 26
    ID         shift, and go to state 27
    NOT        shift, and go to state 28
    ADD        shift, and go to state 29
    SUBTRACT   shift, and go to state 30
    NEGATION   shift, and go to state 31
    CHARACTER  shift, and go to state 32
    OC         shift, and go to state 33
    OF         shift, and go to state 34
    OUTPUT     shift, and go to state 35
    INPUT      shift, and go to state 36
    SWITCH     shift, and go to state 37
    BREAK      shift, and go to state 38
    IF         shift, and go to state 39
    WHILE      shift, and go to state 40
    FOR        shift, and go to state 41
    CONTINUE   shift, and go to state 42
    TYPEOF     shift, and go to state 43
    FLEN       shift, and go to state 44
    MAC        shift, and go to state 45

    SCOL      reduce using rule 57 (return_stmt)
    $default  reduce using rule 19 (stmt_list)

    stmt_list        go to state 308
    stmt             go to state 47
    declaration      go to state 48
    return_stmt      go to state 49
    data_type        go to state 50
    expr             go to state 51
    postfix_expr     go to state 52
    unary_expr       go to state 53
    primary_expr     go to state 54
    unary_op         go to state 55
    const            go to state 56
    assign           go to state 57
    if_stmt          go to state 58
    switch_stmt      go to state 59
    while_loop_stmt  go to state 60
    for_loop_stmt    go to state 61
    func_call        go to state 62


State 308

  118 elif_stmt: ELIF $@10 OC expr CC $@11 OF $@12 stmt_list • CF $@13 elif_stmt

    CF  shift, and go to state 309


State 309

  118 elif_stmt: ELIF $@10 OC expr CC $@11 OF $@12 stmt_list CF • $@13 elif_stmt

    $default  reduce using rule 117 ($@13)

    $@13  go to state 310


State 310

  118 elif_stmt: ELIF $@10 OC expr CC $@11 OF $@12 stmt_list CF $@13 • elif_stmt

    ELIF  shift, and go to state 286

    $default  reduce using rule 119 (elif_stmt)

    elif_stmt  go to state 311


State 311

  118 elif_stmt: ELIF $@10 OC expr CC $@11 OF $@12 stmt_list CF $@13 elif_stmt •

    $default  reduce using rule 118 (elif_stmt)
